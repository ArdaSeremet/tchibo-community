<html>
<head>
<meta charset="utf-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Web 1920 – 1</title>
<style id="applicationStylesheet" type="text/css">
	.mediaViewInfo {
		--web-view-name: Web 1920 – 1;
		--web-view-id: Web_1920__1;
		--web-scale-on-resize: true;
		--web-enable-deep-linking: true;
	}
	:root {
		--web-view-ids: Web_1920__1;
	}
	* {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
		border: none;
	}
	#Web_1920__1 {
		position: absolute;
		width: 1920px;
		height: 1080px;
		background-color: rgba(255,255,255,1);
		overflow: hidden;
		--web-view-name: Web 1920 – 1;
		--web-view-id: Web_1920__1;
		--web-scale-on-resize: true;
		--web-enable-deep-linking: true;
	}
	@keyframes fadein {
	
		0% {
			opacity: 0;
		}
		100% {
			opacity: 1;
		}
	
	}
	#Ellipse_5 {
		filter: blur(5px);
		fill: rgba(255,187,0,1);
	}
	.Ellipse_5 {
		position: absolute;
		overflow: visible;
		width: 47px;
		height: 47px;
		left: 45px;
		top: 166px;
	}
	#Rectangle_1_k {
		fill: url(#Rectangle_1_k);
		stroke: rgba(112,112,112,1);
		stroke-width: 1px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_1_k {
		position: absolute;
		overflow: visible;
		width: 1775px;
		height: 1055px;
		left: 73px;
		top: 13px;
	}
	#Icon_ionic-ios-menu {
		position: absolute;
		width: 43.356px;
		height: 25.291px;
		left: 15px;
		top: 64px;
		overflow: visible;
	}
	#Path_1 {
		fill: rgba(6,57,116,1);
	}
	.Path_1 {
		overflow: visible;
		position: absolute;
		width: 43.356px;
		height: 2.25px;
		left: 0px;
		top: 0px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Path_2 {
		fill: rgba(6,57,116,1);
	}
	.Path_2 {
		overflow: visible;
		position: absolute;
		width: 43.356px;
		height: 2.25px;
		left: 0px;
		top: 11.52px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Path_3 {
		fill: rgba(6,57,116,1);
	}
	.Path_3 {
		overflow: visible;
		position: absolute;
		width: 43.356px;
		height: 2.25px;
		left: 0px;
		top: 23.041px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Icon_awesome-facebook-square {
		fill: rgba(6,57,116,1);
	}
	.Icon_awesome-facebook-square {
		overflow: visible;
		position: absolute;
		width: 31.5px;
		height: 31.5px;
		left: 18.842px;
		top: 816.896px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Icon_ionic-logo-twitter {
		fill: rgba(6,57,116,1);
	}
	.Icon_ionic-logo-twitter {
		overflow: visible;
		position: absolute;
		width: 33.18px;
		height: 27px;
		left: 18.81px;
		top: 881.146px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Icon_awesome-youtube {
		fill: rgba(6,57,116,1);
	}
	.Icon_awesome-youtube {
		overflow: visible;
		position: absolute;
		width: 38.4px;
		height: 27px;
		left: 16.148px;
		top: 941.146px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Icon_awesome-phone-alt {
		fill: rgba(6,57,116,1);
	}
	.Icon_awesome-phone-alt {
		overflow: visible;
		position: absolute;
		width: 39.356px;
		height: 39.356px;
		left: 17px;
		top: 227px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Icon_awesome-user-alt {
		fill: rgba(6,57,116,1);
	}
	.Icon_awesome-user-alt {
		overflow: visible;
		position: absolute;
		width: 39.36px;
		height: 39.36px;
		left: 16.892px;
		top: 110.678px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Tchibo30dpi150mmRGB {
		position: absolute;
		width: 291px;
		height: 291px;
		left: 73px;
		top: -35px;
		overflow: visible;
	}
	#Search_Bar {
		position: absolute;
		width: 411px;
		height: 61px;
		left: 378px;
		top: 111px;
		overflow: visible;
	}
	#Rectangle_2 {
		fill: rgba(255,255,255,1);
		stroke: rgba(112,112,112,1);
		stroke-width: 1px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_2 {
		filter: drop-shadow(0px 3px 6px rgba(0, 0, 0, 0.251));
		position: absolute;
		overflow: visible;
		width: 429px;
		height: 79px;
		left: 0px;
		top: 0px;
	}
	#Search {
		left: 33px;
		top: 17px;
		position: absolute;
		overflow: visible;
		width: 73px;
		white-space: nowrap;
		text-align: left;
		font-family: Segoe UI;
		font-style: normal;
		font-weight: normal;
		font-size: 20px;
		color: rgba(112,112,112,1);
	}
	#Icon_awesome-search {
		fill: rgba(213,193,126,1);
	}
	.Icon_awesome-search {
		overflow: visible;
		position: absolute;
		width: 35.997px;
		height: 36.004px;
		left: 356.5px;
		top: 12.498px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Top_Bar {
		position: absolute;
		width: 976.5px;
		height: 39.5px;
		left: 852.5px;
		top: 123px;
		overflow: visible;
	}
	#Community_Market {
		left: 12.5px;
		top: 0px;
		position: absolute;
		overflow: visible;
		width: 221px;
		white-space: nowrap;
		text-align: left;
		font-family: Bahnschrift;
		font-style: normal;
		font-weight: normal;
		font-size: 26px;
		color: rgba(213,193,126,1);
	}
	#Coffee_Kits {
		left: 332.5px;
		top: 0px;
		position: absolute;
		overflow: visible;
		width: 127px;
		white-space: nowrap;
		text-align: left;
		font-family: Bahnschrift;
		font-style: normal;
		font-weight: normal;
		font-size: 26px;
		color: rgba(213,193,126,1);
	}
	#Coffee_Creator {
		left: 549.5px;
		top: 0px;
		position: absolute;
		overflow: visible;
		width: 171px;
		white-space: nowrap;
		text-align: left;
		font-family: Bahnschrift;
		font-style: normal;
		font-weight: normal;
		font-size: 26px;
		color: rgba(213,193,126,1);
	}
	#Taste_Test________ {
		left: 805.5px;
		top: 0px;
		position: absolute;
		overflow: visible;
		width: 172px;
		white-space: nowrap;
		text-align: left;
		font-family: Bahnschrift;
		font-style: normal;
		font-weight: normal;
		font-size: 26px;
		color: rgba(213,193,126,1);
	}
	#Line_1 {
		fill: transparent;
		stroke: rgba(213,193,126,1);
		stroke-width: 3px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Line_1 {
		overflow: visible;
		position: absolute;
		width: 243px;
		height: 3px;
		left: 0px;
		top: 39px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Line_2 {
		fill: transparent;
		stroke: rgba(213,193,126,1);
		stroke-width: 3px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Line_2 {
		overflow: visible;
		position: absolute;
		width: 145px;
		height: 3px;
		left: 325px;
		top: 39.5px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Line_3 {
		fill: transparent;
		stroke: rgba(213,193,126,1);
		stroke-width: 3px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Line_3 {
		overflow: visible;
		position: absolute;
		width: 187.016px;
		height: 4px;
		left: 540px;
		top: 38.5px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Line_4 {
		fill: transparent;
		stroke: rgba(213,193,126,1);
		stroke-width: 3px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Line_4 {
		overflow: visible;
		position: absolute;
		width: 157px;
		height: 3px;
		left: 795px;
		top: 39.5px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Icon_material-timer {
		fill: rgba(213,193,126,1);
	}
	.Icon_material-timer {
		overflow: visible;
		position: absolute;
		width: 19.5px;
		height: 22.75px;
		left: 926.5px;
		top: 0px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Coffee_Bag {
		position: absolute;
		width: 541px;
		height: 672px;
		left: 133px;
		top: 310px;
		overflow: visible;
	}
	#Icon_ionic-ios-arrow-back {
		fill: rgba(213,193,126,1);
	}
	.Icon_ionic-ios-arrow-back {
		filter: drop-shadow(0px 3px 6px rgba(0, 0, 0, 0.549));
		overflow: visible;
		position: absolute;
		width: 38px;
		height: 66.468px;
		transform: translate(-155px, -269px) matrix(1,0,0,1,658,525.9999) rotate(180deg);
		transform-origin: center;
		left: 0px;
		top: 0px;
	}
	#Icon_ionic-ios-arrow-back_bb {
		fill: rgba(213,193,126,1);
	}
	.Icon_ionic-ios-arrow-back_bb {
		filter: drop-shadow(0px 3px 6px rgba(0, 0, 0, 0.549));
		overflow: visible;
		position: absolute;
		width: 56px;
		height: 84.468px;
		left: 0px;
		top: 257px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Ellipse_1 {
		filter: blur(17px);
		fill: rgba(0,0,0,1);
	}
	.Ellipse_1 {
		position: absolute;
		overflow: visible;
		width: 437px;
		height: 146px;
		left: 111px;
		top: 628px;
	}
	#Ekran_grnts_2021-02-02_164956 {
		position: absolute;
		width: 465px;
		height: 580px;
		left: 38px;
		top: 0px;
		overflow: visible;
	}
	#Rectangle_5 {
		fill: rgba(213,193,126,1);
	}
	.Rectangle_5 {
		position: absolute;
		overflow: visible;
		width: 202px;
		height: 46px;
		left: 1439px;
		top: 600px;
	}
	#Rectangle_6 {
		fill: transparent;
		stroke: rgba(213,193,126,1);
		stroke-width: 3px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_6 {
		position: absolute;
		overflow: visible;
		width: 973px;
		height: 672px;
		left: 789px;
		top: 310px;
	}
	#Main_Content {
		position: absolute;
		width: 507px;
		height: 47.5px;
		left: 845.5px;
		top: 372px;
		overflow: visible;
	}
	#Chocolate__Caramel_Flavored {
		left: 6.5px;
		top: 0px;
		position: absolute;
		overflow: visible;
		width: 490px;
		white-space: nowrap;
		text-align: left;
		font-family: Bahnschrift;
		font-style: normal;
		font-weight: normal;
		font-size: 36px;
		color: rgba(213,193,126,1);
	}
	#Line_5 {
		fill: transparent;
		stroke: rgba(213,193,126,1);
		stroke-width: 3px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Line_5 {
		overflow: visible;
		position: absolute;
		width: 507px;
		height: 3px;
		left: 0px;
		top: 47.5px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Karamel {
		position: absolute;
		width: 586px;
		height: 330px;
		left: 961px;
		top: 388px;
		overflow: visible;
	}
	#Ellipse_2 {
		filter: blur(14px);
		fill: rgba(0,0,0,1);
	}
	.Ellipse_2 {
		position: absolute;
		overflow: visible;
		width: 282px;
		height: 140px;
		left: 194px;
		top: 198px;
	}
	#Balksz-2 {
		position: absolute;
		width: 586px;
		height: 330px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#ikolata {
		position: absolute;
		width: 376px;
		height: 251px;
		left: 773px;
		top: 420px;
		overflow: visible;
	}
	#Ellipse_3 {
		filter: blur(13px);
		fill: rgba(0,0,0,1);
	}
	.Ellipse_3 {
		position: absolute;
		overflow: visible;
		width: 334px;
		height: 157px;
		left: 64px;
		top: 144px;
	}
	#Balksz-3 {
		position: absolute;
		width: 376px;
		height: 251px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#Columbia_Coffee_Beans {
		left: 852px;
		top: 740px;
		position: absolute;
		overflow: visible;
		width: 374px;
		white-space: nowrap;
		text-align: left;
		font-family: Bahnschrift;
		font-style: normal;
		font-weight: normal;
		font-size: 36px;
		color: rgba(213,193,126,1);
	}
	#Line_5_bq {
		fill: transparent;
		stroke: rgba(213,193,126,1);
		stroke-width: 3px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Line_5_bq {
		overflow: visible;
		position: absolute;
		width: 507px;
		height: 3px;
		left: 845.5px;
		top: 787.5px;
		transform: matrix(1,0,0,1,0,0);
	}
	#This_Colombian_marvel_erupts_o {
		left: 846px;
		top: 810px;
		position: absolute;
		overflow: visible;
		width: 568px;
		white-space: nowrap;
		text-align: left;
		font-family: Bahnschrift;
		font-style: normal;
		font-weight: normal;
		font-size: 19px;
		color: rgba(213,193,126,1);
	}
	#ID65 {
		left: 929px;
		top: 658px;
		position: absolute;
		overflow: visible;
		width: 64px;
		white-space: nowrap;
		text-align: left;
		font-family: Bahnschrift;
		font-style: normal;
		font-weight: normal;
		font-size: 36px;
		color: rgba(213,193,126,1);
	}
	#ID35 {
		left: 1222px;
		top: 658px;
		position: absolute;
		overflow: visible;
		width: 64px;
		white-space: nowrap;
		text-align: left;
		font-family: Bahnschrift;
		font-style: normal;
		font-weight: normal;
		font-size: 36px;
		color: rgba(213,193,126,1);
	}
	#Main_Content_bu {
		position: absolute;
		width: 127.361px;
		height: 47.5px;
		left: 1435.5px;
		top: 372px;
		overflow: visible;
	}
	#Rates {
		left: 6.5px;
		top: 0px;
		position: absolute;
		overflow: visible;
		width: 93px;
		white-space: nowrap;
		text-align: left;
		font-family: Bahnschrift;
		font-style: normal;
		font-weight: normal;
		font-size: 36px;
		color: rgba(213,193,126,1);
	}
	#Path_4 {
		fill: rgba(0,0,0,0);
		stroke: rgba(213,193,126,1);
		stroke-width: 3px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Path_4 {
		overflow: visible;
		position: absolute;
		width: 127.361px;
		height: 3px;
		left: 0px;
		top: 47.5px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Rectangle_7 {
		fill: rgba(255,255,255,1);
		stroke: rgba(112,112,112,1);
		stroke-width: 1px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_7 {
		filter: drop-shadow(0px 3px 6px rgba(0, 0, 0, 0.569));
		position: absolute;
		overflow: visible;
		width: 126px;
		height: 60px;
		left: 1436px;
		top: 445px;
	}
	#Rectangle_8 {
		fill: rgba(255,255,255,1);
		stroke: rgba(112,112,112,1);
		stroke-width: 1px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_8 {
		filter: drop-shadow(0px 3px 6px rgba(0, 0, 0, 0.569));
		position: absolute;
		overflow: visible;
		width: 126px;
		height: 60px;
		left: 1574px;
		top: 445px;
	}
	#Rate_Switch {
		position: absolute;
		width: 18px;
		height: 21px;
		left: 1517px;
		top: 456px;
		overflow: visible;
	}
	#Icon_ionic-md-arrow-dropdown {
		fill: rgba(6,57,116,1);
	}
	.Icon_ionic-md-arrow-dropdown {
		overflow: visible;
		position: absolute;
		width: 18px;
		height: 9px;
		transform: translate(-1517px, -460px) matrix(1,0,0,1,1517,460) rotate(180deg);
		transform-origin: center;
		left: 0px;
		top: 0px;
	}
	#Icon_ionic-md-arrow-dropdown_b {
		fill: rgba(6,57,116,1);
	}
	.Icon_ionic-md-arrow-dropdown_b {
		overflow: visible;
		position: absolute;
		width: 18px;
		height: 9px;
		left: 0px;
		top: 12px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Rate_Switch_b {
		position: absolute;
		width: 18px;
		height: 21px;
		left: 1656px;
		top: 456px;
		overflow: visible;
	}
	#Icon_ionic-md-arrow-dropdown_ca {
		fill: rgba(6,57,116,1);
	}
	.Icon_ionic-md-arrow-dropdown_ca {
		overflow: visible;
		position: absolute;
		width: 18px;
		height: 9px;
		transform: translate(-1517px, -460px) matrix(1,0,0,1,1517,460) rotate(180deg);
		transform-origin: center;
		left: 0px;
		top: 0px;
	}
	#Icon_ionic-md-arrow-dropdown_cb {
		fill: rgba(6,57,116,1);
	}
	.Icon_ionic-md-arrow-dropdown_cb {
		overflow: visible;
		position: absolute;
		width: 18px;
		height: 9px;
		left: 0px;
		top: 12px;
		transform: matrix(1,0,0,1,0,0);
	}
	#ID65_b {
		left: 1459px;
		top: 454px;
		position: absolute;
		overflow: visible;
		width: 46px;
		white-space: nowrap;
		text-align: left;
		font-family: Bahnschrift;
		font-style: normal;
		font-weight: normal;
		font-size: 26px;
		color: rgba(6,57,116,1);
	}
	#ID35_b {
		left: 1596px;
		top: 454px;
		position: absolute;
		overflow: visible;
		width: 47px;
		white-space: nowrap;
		text-align: left;
		font-family: Bahnschrift;
		font-style: normal;
		font-weight: normal;
		font-size: 26px;
		color: rgba(6,57,116,1);
	}
	#Main_Content_b {
		position: absolute;
		width: 175px;
		height: 47.5px;
		left: 1436.5px;
		top: 527px;
		overflow: visible;
	}
	#Amount {
		left: 6.5px;
		top: 0px;
		position: absolute;
		overflow: visible;
		width: 126px;
		white-space: nowrap;
		text-align: left;
		font-family: Bahnschrift;
		font-style: normal;
		font-weight: normal;
		font-size: 36px;
		color: rgba(213,193,126,1);
	}
	#Path_4_b {
		fill: rgba(0,0,0,0);
		stroke: rgba(213,193,126,1);
		stroke-width: 3px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Path_4_b {
		overflow: visible;
		position: absolute;
		width: 175px;
		height: 3px;
		left: 0px;
		top: 47.5px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Rectangle_9 {
		fill: rgba(213,193,126,1);
	}
	.Rectangle_9 {
		filter: drop-shadow(0px 3px 6px rgba(0, 0, 0, 0.541));
		position: absolute;
		overflow: visible;
		width: 220px;
		height: 64px;
		left: 1439px;
		top: 658px;
	}
	#Rectangle_10 {
		fill: rgba(213,193,126,1);
	}
	.Rectangle_10 {
		filter: drop-shadow(0px 3px 6px rgba(0, 0, 0, 0.49));
		position: absolute;
		overflow: visible;
		width: 220px;
		height: 64px;
		left: 1439px;
		top: 716px;
	}
	#ID500_gr {
		left: 1490px;
		top: 662px;
		position: absolute;
		overflow: visible;
		width: 110px;
		white-space: nowrap;
		text-align: left;
		font-family: Bahnschrift;
		font-style: normal;
		font-weight: normal;
		font-size: 36px;
		color: rgba(6,57,116,1);
	}
	#Rectangle_11 {
		filter: blur(7px);
		fill: rgba(213,193,126,1);
		stroke: rgba(6,57,116,1);
		stroke-width: 1px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_11 {
		filter: drop-shadow(0px 3px 6px rgba(0, 0, 0, 0));
		position: absolute;
		overflow: visible;
		width: 262px;
		height: 106px;
		left: 1439px;
		top: 600px;
	}
	#ID1000_gr {
		left: 1485px;
		top: 720px;
		position: absolute;
		overflow: visible;
		width: 121px;
		white-space: nowrap;
		text-align: left;
		font-family: Bahnschrift;
		font-style: normal;
		font-weight: normal;
		font-size: 36px;
		color: rgba(6,57,116,1);
	}
	#ID250_gr {
		left: 1491px;
		top: 604px;
		position: absolute;
		overflow: visible;
		width: 109px;
		white-space: nowrap;
		text-align: left;
		font-family: Bahnschrift;
		font-style: normal;
		font-weight: normal;
		font-size: 36px;
		color: rgba(6,57,116,1);
	}
	#Rectangle_12 {
		fill: transparent;
		stroke: rgba(6,57,116,1);
		stroke-width: 2px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_12 {
		position: absolute;
		overflow: visible;
		width: 196px;
		height: 40px;
		left: 1442px;
		top: 603px;
	}
	#Main_Content_ch {
		position: absolute;
		width: 127.361px;
		height: 47.5px;
		left: 1439.5px;
		top: 796px;
		overflow: visible;
	}
	#Order {
		left: 6.5px;
		top: 0px;
		position: absolute;
		overflow: visible;
		width: 93px;
		white-space: nowrap;
		text-align: left;
		font-family: Bahnschrift;
		font-style: normal;
		font-weight: normal;
		font-size: 36px;
		color: rgba(213,193,126,1);
	}
	#Path_4_cj {
		fill: rgba(0,0,0,0);
		stroke: rgba(213,193,126,1);
		stroke-width: 3px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Path_4_cj {
		overflow: visible;
		position: absolute;
		width: 127.361px;
		height: 3px;
		left: 0px;
		top: 47.5px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Rectangle_16 {
		fill: transparent;
		stroke: rgba(6,57,116,1);
		stroke-width: 2px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_16 {
		position: absolute;
		overflow: visible;
		width: 196px;
		height: 40px;
		left: 1442px;
		top: 661px;
	}
	#Rectangle_17 {
		fill: transparent;
		stroke: rgba(6,57,116,1);
		stroke-width: 2px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_17 {
		position: absolute;
		overflow: visible;
		width: 196px;
		height: 40px;
		left: 1442px;
		top: 719px;
		--web-animation: fadein 0.3s ease-out;
		--web-action-type: page;
		--web-action-target: Web_1920___2.html;
		cursor: pointer;
	}
	#Rectangle_18 {
		fill: rgba(213,193,126,1);
	}
	.Rectangle_18 {
		filter: drop-shadow(0px 3px 6px rgba(0, 0, 0, 0.49));
		position: absolute;
		overflow: visible;
		width: 220px;
		height: 64px;
		left: 1436px;
		top: 856px;
	}
	#Rectangle_19 {
		fill: rgba(213,193,126,1);
	}
	.Rectangle_19 {
		filter: drop-shadow(0px 3px 6px rgba(0, 0, 0, 0.49));
		position: absolute;
		overflow: visible;
		width: 220px;
		height: 64px;
		left: 1436px;
		top: 915px;
	}
	#Rectangle_20 {
		fill: transparent;
		stroke: rgba(6,57,116,1);
		stroke-width: 2px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_20 {
		position: absolute;
		overflow: visible;
		width: 196px;
		height: 40px;
		left: 1439px;
		top: 859px;
	}
	#Rectangle_21 {
		fill: transparent;
		stroke: rgba(6,57,116,1);
		stroke-width: 2px;
		stroke-linejoin: miter;
		stroke-linecap: butt;
		stroke-miterlimit: 4;
		shape-rendering: auto;
	}
	.Rectangle_21 {
		position: absolute;
		overflow: visible;
		width: 196px;
		height: 40px;
		left: 1439px;
		top: 918px;
	}
	#Group_2 {
		position: absolute;
		width: 144.238px;
		height: 23px;
		left: 1465px;
		top: 927px;
		overflow: visible;
	}
	#Add_to_Cart {
		left: 0px;
		top: 0px;
		position: absolute;
		overflow: visible;
		width: 117px;
		white-space: nowrap;
		text-align: left;
		font-family: Bahnschrift;
		font-style: normal;
		font-weight: normal;
		font-size: 23px;
		color: rgba(6,57,116,1);
	}
	#Icon_awesome-shopping-cart {
		fill: rgba(6,57,116,1);
	}
	.Icon_awesome-shopping-cart {
		overflow: visible;
		position: absolute;
		width: 19.688px;
		height: 17.5px;
		left: 124.55px;
		top: 2.5px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Group_1 {
		position: absolute;
		width: 111.632px;
		height: 23px;
		left: 1481px;
		top: 868px;
		overflow: visible;
	}
	#Buy_Now {
		left: 0px;
		top: 0px;
		position: absolute;
		overflow: visible;
		width: 92px;
		white-space: nowrap;
		text-align: left;
		font-family: Bahnschrift;
		font-style: normal;
		font-weight: normal;
		font-size: 23px;
		color: rgba(6,57,116,1);
	}
	#Icon_awesome-euro-sign {
		fill: rgba(6,57,116,1);
	}
	.Icon_awesome-euro-sign {
		overflow: visible;
		position: absolute;
		width: 14.632px;
		height: 20.5px;
		left: 97px;
		top: 0px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Ellipse_4 {
		fill: rgba(255,187,0,1);
	}
	.Ellipse_4 {
		position: absolute;
		overflow: visible;
		width: 17px;
		height: 17px;
		left: 45px;
		top: 166px;
	}
	#Icon_awesome-shopping-cart_cx {
		fill: rgba(6,57,116,1);
	}
	.Icon_awesome-shopping-cart_cx {
		overflow: visible;
		position: absolute;
		width: 41.356px;
		height: 36.761px;
		left: 15px;
		top: 170px;
		transform: matrix(1,0,0,1,0,0);
	}
</style>
<script id="applicationScript">
///////////////////////////////////////
// INITIALIZATION
///////////////////////////////////////

/**
 * Functionality for scaling, showing by media query, and navigation between multiple pages on a single page. 
 * Code subject to change.
 **/

if (window.console==null) { window["console"] = { log : function() {} } }; // some browsers do not set console

var Application = function() {
	// event constants
	this.prefix = "--web-";
	this.NAVIGATION_CHANGE = "viewChange";
	this.VIEW_NOT_FOUND = "viewNotFound";
	this.VIEW_CHANGE = "viewChange";
	this.VIEW_CHANGING = "viewChanging";
	this.STATE_NOT_FOUND = "stateNotFound";
	this.APPLICATION_COMPLETE = "applicationComplete";
	this.APPLICATION_RESIZE = "applicationResize";
	this.SIZE_STATE_NAME = "data-is-view-scaled";
	this.STATE_NAME = this.prefix + "state";

	this.lastTrigger = null;
	this.lastView = null;
	this.lastState = null;
	this.lastOverlay = null;
	this.currentView = null;
	this.currentState = null;
	this.currentOverlay = null;
	this.currentQuery = {index: 0, rule: null, mediaText: null, id: null};
	this.inclusionQuery = "(min-width: 0px)";
	this.exclusionQuery = "none and (min-width: 99999px)";
	this.LastModifiedDateLabelName = "LastModifiedDateLabel";
	this.viewScaleSliderId = "ViewScaleSliderInput";
	this.pageRefreshedName = "showPageRefreshedNotification";
	this.applicationStylesheet = null;
	this.mediaQueryDictionary = {};
	this.viewsDictionary = {};
	this.addedViews = [];
	this.views = {};
	this.viewIds = [];
	this.viewQueries = {};
	this.overlays = {};
	this.overlayIds = [];
	this.numberOfViews = 0;
	this.verticalPadding = 0;
	this.horizontalPadding = 0;
	this.stateName = null;
	this.viewScale = 1;
	this.viewLeft = 0;
	this.viewTop = 0;
	this.horizontalScrollbarsNeeded = false;
	this.verticalScrollbarsNeeded = false;

	// view settings
	this.showUpdateNotification = false;
	this.showNavigationControls = false;
	this.scaleViewsToFit = false;
	this.scaleToFitOnDoubleClick = false;
	this.actualSizeOnDoubleClick = false;
	this.scaleViewsOnResize = false;
	this.navigationOnKeypress = false;
	this.showViewName = false;
	this.enableDeepLinking = true;
	this.refreshPageForChanges = false;
	this.showRefreshNotifications = true;

	// view controls
	this.scaleViewSlider = null;
	this.lastModifiedLabel = null;
	this.supportsPopState = false; // window.history.pushState!=null;
	this.initialized = false;

	// refresh properties
	this.refreshDuration = 250;
	this.lastModifiedDate = null;
	this.refreshRequest = null;
	this.refreshInterval = null;
	this.refreshContent = null;
	this.refreshContentSize = null;
	this.refreshCheckContent = false;
	this.refreshCheckContentSize = false;

	var self = this;

	self.initialize = function(event) {
		var view = self.getVisibleView();
		var views = self.getVisibleViews();
		if (view==null) view = self.getInitialView();
		self.collectViews();
		self.collectOverlays();
		self.collectMediaQueries();

		for (let index = 0; index < views.length; index++) {
			var view = views[index];
			self.setViewOptions(view);
			self.setViewVariables(view);
			self.centerView(view);
		}

		// sometimes the body size is 0 so we call this now and again later
		if (self.initialized) {
			window.addEventListener(self.NAVIGATION_CHANGE, self.viewChangeHandler);
			window.addEventListener("keyup", self.keypressHandler);
			window.addEventListener("keypress", self.keypressHandler);
			window.addEventListener("resize", self.resizeHandler);
			window.document.addEventListener("dblclick", self.doubleClickHandler);

			if (self.supportsPopState) {
				window.addEventListener('popstate', self.popStateHandler);
			}
			else {
				window.addEventListener('hashchange', self.hashChangeHandler);
			}

			// we are ready to go
			window.dispatchEvent(new Event(self.APPLICATION_COMPLETE));
		}

		if (self.initialized==false) {
			if (self.enableDeepLinking) {
				self.syncronizeViewToURL();
			} 
	
			if (self.refreshPageForChanges) {
				self.setupRefreshForChanges();
			}
	
			self.initialized = true;
		}
		
		if (self.scaleViewsToFit) {
			self.viewScale = self.scaleViewToFit(view);
			
			if (self.viewScale<0) {
				setTimeout(self.scaleViewToFit, 500, view);
			}
		}
		else if (view) {
			self.viewScale = self.getViewScaleValue(view);
			self.centerView(view);
			self.updateSliderValue(self.viewScale);
		}
		else {
			// no view found
		}
	
		if (self.showUpdateNotification) {
			self.showNotification();
		}

		//"addEventListener" in window ? null : window.addEventListener = window.attachEvent;
		//"addEventListener" in document ? null : document.addEventListener = document.attachEvent;
	}


	///////////////////////////////////////
	// AUTO REFRESH 
	///////////////////////////////////////

	self.setupRefreshForChanges = function() {
		self.refreshRequest = new XMLHttpRequest();

		if (!self.refreshRequest) {
			return false;
		}

		// get document start values immediately
		self.requestRefreshUpdate();
	}

	/**
	 * Attempt to check the last modified date by the headers 
	 * or the last modified property from the byte array (experimental)
	 **/
	self.requestRefreshUpdate = function() {
		var url = document.location.href;
		var protocol = window.location.protocol;
		var method;
		
		try {

			if (self.refreshCheckContentSize) {
				self.refreshRequest.open('HEAD', url, true);
			}
			else if (self.refreshCheckContent) {
				self.refreshContent = document.documentElement.outerHTML;
				self.refreshRequest.open('GET', url, true);
				self.refreshRequest.responseType = "text";
			}
			else {

				// get page last modified date for the first call to compare to later
				if (self.lastModifiedDate==null) {

					// File system does not send headers in FF so get blob if possible
					if (protocol=="file:") {
						self.refreshRequest.open("GET", url, true);
						self.refreshRequest.responseType = "blob";
					}
					else {
						self.refreshRequest.open("HEAD", url, true);
						self.refreshRequest.responseType = "blob";
					}

					self.refreshRequest.onload = self.refreshOnLoadOnceHandler;

					// In some browsers (Chrome & Safari) this error occurs at send: 
					// 
					// Chrome - Access to XMLHttpRequest at 'file:///index.html' from origin 'null' 
					// has been blocked by CORS policy: 
					// Cross origin requests are only supported for protocol schemes: 
					// http, data, chrome, chrome-extension, https.
					// 
					// Safari - XMLHttpRequest cannot load file:///Users/user/Public/index.html. Cross origin requests are only supported for HTTP.
					// 
					// Solution is to run a local server, set local permissions or test in another browser
					self.refreshRequest.send(null);

					// In MS browsers the following behavior occurs possibly due to an AJAX call to check last modified date: 
					// 
					// DOM7011: The code on this page disabled back and forward caching.

					// In Brave (Chrome) error when on the server
					// index.js:221 HEAD https://www.example.com/ net::ERR_INSUFFICIENT_RESOURCES
					// self.refreshRequest.send(null);

				}
				else {
					self.refreshRequest = new XMLHttpRequest();
					self.refreshRequest.onreadystatechange = self.refreshHandler;
					self.refreshRequest.ontimeout = function() {
						self.log("Couldn't find page to check for updates");
					}
					
					var method;
					if (protocol=="file:") {
						method = "GET";
					}
					else {
						method = "HEAD";
					}

					//refreshRequest.open('HEAD', url, true);
					self.refreshRequest.open(method, url, true);
					self.refreshRequest.responseType = "blob";
					self.refreshRequest.send(null);
				}
			}
		}
		catch (error) {
			self.log("Refresh failed for the following reason:")
			self.log(error);
		}
	}

	self.refreshHandler = function() {
		var contentSize;

		try {

			if (self.refreshRequest.readyState === XMLHttpRequest.DONE) {
				
				if (self.refreshRequest.status === 2 || 
					self.refreshRequest.status === 200) {
					var pageChanged = false;

					self.updateLastModifiedLabel();

					if (self.refreshCheckContentSize) {
						var lastModifiedHeader = self.refreshRequest.getResponseHeader("Last-Modified");
						contentSize = self.refreshRequest.getResponseHeader("Content-Length");
						//lastModifiedDate = refreshRequest.getResponseHeader("Last-Modified");
						var headers = self.refreshRequest.getAllResponseHeaders();
						var hasContentHeader = headers.indexOf("Content-Length")!=-1;
						
						if (hasContentHeader) {
							contentSize = self.refreshRequest.getResponseHeader("Content-Length");

							// size has not been set yet
							if (self.refreshContentSize==null) {
								self.refreshContentSize = contentSize;
								// exit and let interval call this method again
								return;
							}

							if (contentSize!=self.refreshContentSize) {
								pageChanged = true;
							}
						}
					}
					else if (self.refreshCheckContent) {

						if (self.refreshRequest.responseText!=self.refreshContent) {
							pageChanged = true;
						}
					}
					else {
						lastModifiedHeader = self.getLastModified(self.refreshRequest);

						if (self.lastModifiedDate!=lastModifiedHeader) {
							self.log("lastModifiedDate:" + self.lastModifiedDate + ",lastModifiedHeader:" +lastModifiedHeader);
							pageChanged = true;
						}

					}

					
					if (pageChanged) {
						clearInterval(self.refreshInterval);
						self.refreshUpdatedPage();
						return;
					}

				}
				else {
					self.log('There was a problem with the request.');
				}

			}
		}
		catch( error ) {
			//console.log('Caught Exception: ' + error);
		}
	}

	self.refreshOnLoadOnceHandler = function(event) {

		// get the last modified date
		if (self.refreshRequest.response) {
			self.lastModifiedDate = self.getLastModified(self.refreshRequest);

			if (self.lastModifiedDate!=null) {

				if (self.refreshInterval==null) {
					self.refreshInterval = setInterval(self.requestRefreshUpdate, self.refreshDuration);
				}
			}
			else {
				self.log("Could not get last modified date from the server");
			}
		}
	}

	self.refreshUpdatedPage = function() {
		if (self.showRefreshNotifications) {
			var date = new Date().setTime((new Date().getTime()+10000));
			document.cookie = encodeURIComponent(self.pageRefreshedName) + "=true" + "; max-age=6000;" + " path=/";
		}

		document.location.reload(true);
	}

	self.showNotification = function(duration) {
		var notificationID = self.pageRefreshedName+"ID";
		var notification = document.getElementById(notificationID);
		if (duration==null) duration = 4000;

		if (notification!=null) {return;}

		notification = document.createElement("div");
		notification.id = notificationID;
		notification.textContent = "PAGE UPDATED";
		var styleRule = ""
		styleRule = "position: fixed; padding: 7px 16px 6px 16px; font-family: Arial, sans-serif; font-size: 10px; font-weight: bold; left: 50%;";
		styleRule += "top: 20px; background-color: rgba(0,0,0,.5); border-radius: 12px; color:rgb(235, 235, 235); transition: all 2s linear;";
		styleRule += "transform: translateX(-50%); letter-spacing: .5px; filter: drop-shadow(2px 2px 6px rgba(0, 0, 0, .1))";
		notification.setAttribute("style", styleRule);

		notification.className= "PageRefreshedClass";
		
		document.body.appendChild(notification);

		setTimeout(function() {
			notification.style.opacity = "0";
			notification.style.filter = "drop-shadow( 0px 0px 0px rgba(0,0,0, .5))";
			setTimeout(function() {
				notification.parentNode.removeChild(notification);
			}, duration)
		}, duration);

		document.cookie = encodeURIComponent(self.pageRefreshedName) + "=; max-age=1; path=/";
	}

	/**
	 * Get the last modified date from the header 
	 * or file object after request has been received
	 **/
	self.getLastModified = function(request) {
		var date;

		// file protocol - FILE object with last modified property
		if (request.response && request.response.lastModified) {
			date = request.response.lastModified;
		}
		
		// http protocol - check headers
		if (date==null) {
			date = request.getResponseHeader("Last-Modified");
		}

		return date;
	}

	self.updateLastModifiedLabel = function() {
		var labelValue = "";
		
		if (self.lastModifiedLabel==null) {
			self.lastModifiedLabel = document.getElementById("LastModifiedLabel");
		}

		if (self.lastModifiedLabel) {
			var seconds = parseInt(((new Date().getTime() - Date.parse(document.lastModified)) / 1000 / 60) * 100 + "");
			var minutes = 0;
			var hours = 0;

			if (seconds < 60) {
				seconds = Math.floor(seconds/10)*10;
				labelValue = seconds + " seconds";
			}
			else {
				minutes = parseInt((seconds/60) + "");

				if (minutes>60) {
					hours = parseInt((seconds/60/60) +"");
					labelValue += hours==1 ? " hour" : " hours";
				}
				else {
					labelValue = minutes+"";
					labelValue += minutes==1 ? " minute" : " minutes";
				}
			}
			
			if (seconds<10) {
				labelValue = "Updated now";
			}
			else {
				labelValue = "Updated " + labelValue + " ago";
			}

			if (self.lastModifiedLabel.firstElementChild) {
				self.lastModifiedLabel.firstElementChild.textContent = labelValue;

			}
			else if ("textContent" in self.lastModifiedLabel) {
				self.lastModifiedLabel.textContent = labelValue;
			}
		}
	}

	self.getShortString = function(string, length) {
		if (length==null) length = 30;
		string = string!=null ? string.substr(0, length).replace(/\n/g, "") : "[String is null]";
		return string;
	}

	self.getShortNumber = function(value, places) {
		if (places==null || places<1) places = 4;
		value = Math.round(value * Math.pow(10,places)) / Math.pow(10, places);
		return value;
	}

	///////////////////////////////////////
	// NAVIGATION CONTROLS
	///////////////////////////////////////

	self.updateViewLabel = function() {
		var viewNavigationLabel = document.getElementById("ViewNavigationLabel");
		var view = self.getVisibleView();
		var viewIndex = view ? self.getViewIndex(view) : -1;
		var viewName = view ? self.getViewPreferenceValue(view, self.prefix + "view-name") : null;
		var viewId = view ? view.id : null;

		if (viewNavigationLabel && view) {
			if (viewName && viewName.indexOf('"')!=-1) {
				viewName = viewName.replace(/"/g, "");
			}

			if (self.showViewName) {
				viewNavigationLabel.textContent = viewName;
				self.setTooltip(viewNavigationLabel, viewIndex + 1 + " of " + self.numberOfViews);
			}
			else {
				viewNavigationLabel.textContent = viewIndex + 1 + " of " + self.numberOfViews;
				self.setTooltip(viewNavigationLabel, viewName);
			}

		}
	}

	self.updateURL = function(view) {
		view = view == null ? self.getVisibleView() : view;
		var viewId = view ? view.id : null
		var viewFragment = view ? "#"+ viewId : null;

		if (viewId && self.viewIds.length>1 && self.enableDeepLinking) {

			if (self.supportsPopState==false) {
				self.setFragment(viewId);
			}
			else {
				if (viewFragment!=window.location.hash) {

					if (window.location.hash==null) {
						window.history.replaceState({name:viewId}, null, viewFragment);
					}
					else {
						window.history.pushState({name:viewId}, null, viewFragment);
					}
				}
			}
		}
	}

	self.updateURLState = function(view, stateName) {
		stateName = view && (stateName=="" || stateName==null) ? self.getStateNameByViewId(view.id) : stateName;

		if (self.supportsPopState==false) {
			self.setFragment(stateName);
		}
		else {
			if (stateName!=window.location.hash) {

				if (window.location.hash==null) {
					window.history.replaceState({name:view.viewId}, null, stateName);
				}
				else {
					window.history.pushState({name:view.viewId}, null, stateName);
				}
			}
		}
	}

	self.setFragment = function(value) {
		window.location.hash = "#" + value;
	}

	self.setTooltip = function(element, value) {
		// setting the tooltip in edge causes a page crash on hover
		if (/Edge/.test(navigator.userAgent)) { return; }

		if ("title" in element) {
			element.title = value;
		}
	}

	self.getStylesheetRules = function(styleSheet) {
		try {
			if (styleSheet) return styleSheet.cssRules || styleSheet.rules;
	
			return document.styleSheets[0]["cssRules"] || document.styleSheets[0]["rules"];
		}
		catch (error) {
			// ERRORS:
			// SecurityError: The operation is insecure.
			// Errors happen when script loads before stylesheet or loading an external css locally

			// InvalidAccessError: A parameter or an operation is not supported by the underlying object
			// Place script after stylesheet

			console.log(error);
			if (error.toString().indexOf("The operation is insecure")!=-1) {
				console.log("Load the stylesheet before the script or load the stylesheet inline until it can be loaded on a server")
			}
			return [];
		}
	}

	/**
	 * If single page application hide all of the views. 
	 * @param {Number} selectedIndex if provided shows the view at index provided
	 **/
	self.hideViews = function(selectedIndex, animation) {
		var rules = self.getStylesheetRules();
		var queryIndex = 0;
		var numberOfRules = rules!=null ? rules.length : 0;

		// loop through rules and hide media queries except selected
		for (var i=0;i<numberOfRules;i++) {
			var rule = rules[i];

			if (rule.media!=null) {

				if (queryIndex==selectedIndex) {
					self.currentQuery.mediaText = rule.conditionText;
					self.currentQuery.index = selectedIndex;
					self.currentQuery.rule = rule;
					self.enableMediaQuery(rule);
				}
				else {
					if (animation) {
						self.fadeOut(rule)
					}
					else {
						self.disableMediaQuery(rule);
					}
				}
				
				queryIndex++;
			}
		}

		self.numberOfViews = queryIndex;
		self.updateViewLabel();
		self.updateURL();

		self.dispatchViewChange();

		var view = self.getVisibleView();
		var viewIndex = view ? self.getViewIndex(view) : -1;

		return viewIndex==selectedIndex ? view : null;
	}

	/**
	 * Hide view
	 * @param {Object} view element to hide
	 **/
	self.hideView = function(view) {
		var rule = view ? self.mediaQueryDictionary[view.id] : null;

		if (rule) {
			self.disableMediaQuery(rule);
		}
	}

	/**
	 * Hide overlay
	 * @param {Object} overlay element to hide
	 **/
	self.hideOverlay = function(overlay) {
		var rule = overlay ? self.mediaQueryDictionary[overlay.id] : null;

		if (rule) {
			self.disableMediaQuery(rule);

			//if (self.showByMediaQuery) {
				overlay.style.display = "none";
			//}
		}
	}

	/**
	 * Show the view by media query. Does not hide current views
	 * Sets view options by default
	 * @param {Object} view element to show
	 * @param {Boolean} setViewOptions sets view options if null or true
	 */
	self.showViewByMediaQuery = function(view, setViewOptions) {
		var id = view ? view.id : null;
		var query = id ? self.mediaQueryDictionary[id] : null;
		var isOverlay = view ? self.isOverlay(view) : false;
		setViewOptions = setViewOptions==null ? true : setViewOptions;

		if (query) {
			self.enableMediaQuery(query);

			if (isOverlay && view && setViewOptions) {
				self.setViewVariables(null, view);
			}
			else {
				if (view && setViewOptions) self.setViewOptions(view);
				if (view && setViewOptions) self.setViewVariables(view);
			}
		}
	}

	/**
	 * Show the view. Does not hide current views
	 */
	self.showView = function(view, setViewOptions) {
		var id = view ? view.id : null;
		var query = id ? self.mediaQueryDictionary[id] : null;
		var display = null;
		setViewOptions = setViewOptions==null ? true : setViewOptions;

		if (query) {
			self.enableMediaQuery(query);
			if (view==null) view =self.getVisibleView();
			if (view && setViewOptions) self.setViewOptions(view);
		}
		else if (id) {
			display = window.getComputedStyle(view).getPropertyValue("display");
			if (display=="" || display=="none") {
				view.style.display = "block";
			}
		}

		if (view) {
			if (self.currentView!=null) {
				self.lastView = self.currentView;
			}

			self.currentView = view;
		}
	}

	self.showViewById = function(id, setViewOptions) {
		var view = id ? self.getViewById(id) : null;

		if (view) {
			self.showView(view);
			return;
		}

		self.log("View not found '" + id + "'");
	}

	self.getElementView = function(element) {
		var view = element;
		var viewFound = false;

		while (viewFound==false || view==null) {
			if (view && self.viewsDictionary[view.id]) {
				return view;
			}
			view = view.parentNode;
		}
	}

	/**
	 * Show overlay over view
	 * @param {Event | HTMLElement} event event or html element with styles applied
	 * @param {String} id id of view or view reference
	 * @param {Number} x x location
	 * @param {Number} y y location
	 */
	self.showOverlay = function(event, id, x, y) {
		var overlay = id && typeof id === 'string' ? self.getViewById(id) : id ? id : null;
		var query = overlay ? self.mediaQueryDictionary[overlay.id] : null;
		var centerHorizontally = false;
		var centerVertically = false;
		var anchorLeft = false;
		var anchorTop = false;
		var anchorRight = false;
		var anchorBottom = false;
		var display = null;
		var reparent = true;
		var view = null;
		
		if (overlay==null || overlay==false) {
			self.log("Overlay not found, '"+ id + "'");
			return;
		}

		// get enter animation - event target must have css variables declared
		if (event) {
			var button = event.currentTarget || event; // can be event or htmlelement
			var buttonComputedStyles = getComputedStyle(button);
			var actionTargetValue = buttonComputedStyles.getPropertyValue(self.prefix+"action-target").trim();
			var animation = buttonComputedStyles.getPropertyValue(self.prefix+"animation").trim();
			var isAnimated = animation!="";
			var targetType = buttonComputedStyles.getPropertyValue(self.prefix+"action-type").trim();
			var actionTarget = self.application ? null : self.getElement(actionTargetValue);
			var actionTargetStyles = actionTarget ? actionTarget.style : null;

			if (actionTargetStyles) {
				actionTargetStyles.setProperty("animation", animation);
			}

			if ("stopImmediatePropagation" in event) {
				event.stopImmediatePropagation();
			}
		}
		
		if (self.application==false || targetType=="page") {
			document.location.href = "./" + actionTargetValue;
			return;
		}

		// remove any current overlays
		if (self.currentOverlay) {

			// act as switch if same button
			if (self.currentOverlay==actionTarget || self.currentOverlay==null) {
				if (self.lastTrigger==button) {
					self.removeOverlay(isAnimated);
					return;
				}
			}
			else {
				self.removeOverlay(isAnimated);
			}
		}

		if (reparent) {
			view = self.getElementView(button);
			if (view) {
				view.appendChild(overlay);
			}
		}

		if (query) {
			//self.setElementAnimation(overlay, null);
			//overlay.style.animation = animation;
			self.enableMediaQuery(query);
			
			var display = overlay && overlay.style.display;
			
			if (overlay && display=="" || display=="none") {
				overlay.style.display = "block";
				//self.setViewOptions(overlay);
			}

			// add animation defined in event target style declaration
			if (animation && self.supportAnimations) {
				self.fadeIn(overlay, false, animation);
			}
		}
		else if (id) {

			display = window.getComputedStyle(overlay).getPropertyValue("display");

			if (display=="" || display=="none") {
				overlay.style.display = "block";
			}

			// add animation defined in event target style declaration
			if (animation && self.supportAnimations) {
				self.fadeIn(overlay, false, animation);
			}
		}

		// do not set x or y position if centering
		var horizontal = self.prefix + "center-horizontally";
		var vertical = self.prefix + "center-vertically";
		var style = overlay.style;
		var transform = [];

		centerHorizontally = self.getIsStyleDefined(id, horizontal) ? self.getViewPreferenceBoolean(overlay, horizontal) : false;
		centerVertically = self.getIsStyleDefined(id, vertical) ? self.getViewPreferenceBoolean(overlay, vertical) : false;
		anchorLeft = self.getIsStyleDefined(id, "left");
		anchorRight = self.getIsStyleDefined(id, "right");
		anchorTop = self.getIsStyleDefined(id, "top");
		anchorBottom = self.getIsStyleDefined(id, "bottom");

		
		if (self.viewsDictionary[overlay.id] && self.viewsDictionary[overlay.id].styleDeclaration) {
			style = self.viewsDictionary[overlay.id].styleDeclaration.style;
		}
		
		if (centerHorizontally) {
			style.left = "50%";
			style.transformOrigin = "0 0";
			transform.push("translateX(-50%)");
		}
		else if (anchorRight && anchorLeft) {
			style.left = x + "px";
		}
		else if (anchorRight) {
			//style.right = x + "px";
		}
		else {
			style.left = x + "px";
		}
		
		if (centerVertically) {
			style.top = "50%";
			transform.push("translateY(-50%)");
			style.transformOrigin = "0 0";
		}
		else if (anchorTop && anchorBottom) {
			style.top = y + "px";
		}
		else if (anchorBottom) {
			//style.bottom = y + "px";
		}
		else {
			style.top = y + "px";
		}

		if (transform.length) {
			style.transform = transform.join(" ");
		}

		self.currentOverlay = overlay;
		self.lastTrigger = button;
	}

	self.goBack = function() {
		if (self.currentOverlay) {
			self.removeOverlay();
		}
		else if (self.lastView) {
			self.goToView(self.lastView.id);
		}
	}

	self.removeOverlay = function(animate) {
		var overlay = self.currentOverlay;
		animate = animate===false ? false : true;

		if (overlay) {
			var style = overlay.style;
			
			if (style.animation && self.supportAnimations && animate) {
				self.reverseAnimation(overlay, true);

				var duration = self.getAnimationDuration(style.animation, true);
		
				setTimeout(function() {
					self.setElementAnimation(overlay, null);
					self.hideOverlay(overlay);
					self.currentOverlay = null;
				}, duration);
			}
			else {
				self.setElementAnimation(overlay, null);
				self.hideOverlay(overlay);
				self.currentOverlay = null;
			}
		}
	}

	/**
	 * Reverse the animation and hide after
	 * @param {Object} target element with animation
	 * @param {Boolean} hide hide after animation ends
	 */
	self.reverseAnimation = function(target, hide) {
		var lastAnimation = null;
		var style = target.style;

		style.animationPlayState = "paused";
		lastAnimation = style.animation;
		style.animation = null;
		style.animationPlayState = "paused";

		if (hide) {
			//target.addEventListener("animationend", self.animationEndHideHandler);
	
			var duration = self.getAnimationDuration(lastAnimation, true);
			var isOverlay = self.isOverlay(target);
	
			setTimeout(function() {
				self.setElementAnimation(target, null);

				if (isOverlay) {
					self.hideOverlay(target);
				}
				else {
					self.hideView(target);
				}
			}, duration);
		}

		setTimeout(function() {
			style.animation = lastAnimation;
			style.animationPlayState = "paused";
			style.animationDirection = "reverse";
			style.animationPlayState = "running";
		}, 30);
	}

	self.animationEndHandler = function(event) {
		var target = event.currentTarget;
		self.dispatchEvent(new Event(event.type));
	}

	self.isOverlay = function(view) {
		var result = view ? self.getViewPreferenceBoolean(view, self.prefix + "is-overlay") : false;

		return result;
	}

	self.animationEndHideHandler = function(event) {
		var target = event.currentTarget;
		self.setViewVariables(null, target);
		self.hideView(target);
		target.removeEventListener("animationend", self.animationEndHideHandler);
	}

	self.animationEndShowHandler = function(event) {
		var target = event.currentTarget;
		target.removeEventListener("animationend", self.animationEndShowHandler);
	}

	self.setViewOptions = function(view) {

		if (view) {
			self.minimumScale = self.getViewPreferenceValue(view, self.prefix + "minimum-scale");
			self.maximumScale = self.getViewPreferenceValue(view, self.prefix + "maximum-scale");
			self.scaleViewsToFit = self.getViewPreferenceBoolean(view, self.prefix + "scale-to-fit");
			self.scaleToFitType = self.getViewPreferenceValue(view, self.prefix + "scale-to-fit-type");
			self.scaleToFitOnDoubleClick = self.getViewPreferenceBoolean(view, self.prefix + "scale-on-double-click");
			self.actualSizeOnDoubleClick = self.getViewPreferenceBoolean(view, self.prefix + "actual-size-on-double-click");
			self.scaleViewsOnResize = self.getViewPreferenceBoolean(view, self.prefix + "scale-on-resize");
			self.enableScaleUp = self.getViewPreferenceBoolean(view, self.prefix + "enable-scale-up");
			self.centerHorizontally = self.getViewPreferenceBoolean(view, self.prefix + "center-horizontally");
			self.centerVertically = self.getViewPreferenceBoolean(view, self.prefix + "center-vertically");
			self.navigationOnKeypress = self.getViewPreferenceBoolean(view, self.prefix + "navigate-on-keypress");
			self.showViewName = self.getViewPreferenceBoolean(view, self.prefix + "show-view-name");
			self.refreshPageForChanges = self.getViewPreferenceBoolean(view, self.prefix + "refresh-for-changes");
			self.refreshPageForChangesInterval = self.getViewPreferenceValue(view, self.prefix + "refresh-interval");
			self.showNavigationControls = self.getViewPreferenceBoolean(view, self.prefix + "show-navigation-controls");
			self.scaleViewSlider = self.getViewPreferenceBoolean(view, self.prefix + "show-scale-controls");
			self.enableDeepLinking = self.getViewPreferenceBoolean(view, self.prefix + "enable-deep-linking");
			self.singlePageApplication = self.getViewPreferenceBoolean(view, self.prefix + "application");
			self.showByMediaQuery = self.getViewPreferenceBoolean(view, self.prefix + "show-by-media-query");
			self.showUpdateNotification = document.cookie!="" ? document.cookie.indexOf(self.pageRefreshedName)!=-1 : false;
			self.imageComparisonDuration = self.getViewPreferenceValue(view, self.prefix + "image-comparison-duration");
			self.supportAnimations = self.getViewPreferenceBoolean(view, self.prefix + "enable-animations", true);

			if (self.scaleViewsToFit) {
				var newScaleValue = self.scaleViewToFit(view);
				
				if (newScaleValue<0) {
					setTimeout(self.scaleViewToFit, 500, view);
				}
			}
			else {
				self.viewScale = self.getViewScaleValue(view);
				self.viewToFitWidthScale = self.getViewFitToViewportWidthScale(view, self.enableScaleUp)
				self.viewToFitHeightScale = self.getViewFitToViewportScale(view, self.enableScaleUp);
				self.updateSliderValue(self.viewScale);
			}

			if (self.imageComparisonDuration!=null) {
				// todo
			}

			if (self.refreshPageForChangesInterval!=null) {
				self.refreshDuration = Number(self.refreshPageForChangesInterval);
			}
		}
	}

	self.previousView = function(event) {
		var rules = self.getStylesheetRules();
		var view = self.getVisibleView()
		var index = view ? self.getViewIndex(view) : -1;
		var prevQueryIndex = index!=-1 ? index-1 : self.currentQuery.index-1;
		var queryIndex = 0;
		var numberOfRules = rules!=null ? rules.length : 0;

		if (event) {
			event.stopImmediatePropagation();
		}

		if (prevQueryIndex<0) {
			return;
		}

		// loop through rules and hide media queries except selected
		for (var i=0;i<numberOfRules;i++) {
			var rule = rules[i];
			
			if (rule.media!=null) {

				if (queryIndex==prevQueryIndex) {
					self.currentQuery.mediaText = rule.conditionText;
					self.currentQuery.index = prevQueryIndex;
					self.currentQuery.rule = rule;
					self.enableMediaQuery(rule);
					self.updateViewLabel();
					self.updateURL();
					self.dispatchViewChange();
				}
				else {
					self.disableMediaQuery(rule);
				}

				queryIndex++;
			}
		}
	}

	self.nextView = function(event) {
		var rules = self.getStylesheetRules();
		var view = self.getVisibleView();
		var index = view ? self.getViewIndex(view) : -1;
		var nextQueryIndex = index!=-1 ? index+1 : self.currentQuery.index+1;
		var queryIndex = 0;
		var numberOfRules = rules!=null ? rules.length : 0;
		var numberOfMediaQueries = self.getNumberOfMediaRules();

		if (event) {
			event.stopImmediatePropagation();
		}

		if (nextQueryIndex>=numberOfMediaQueries) {
			return;
		}

		// loop through rules and hide media queries except selected
		for (var i=0;i<numberOfRules;i++) {
			var rule = rules[i];
			
			if (rule.media!=null) {

				if (queryIndex==nextQueryIndex) {
					self.currentQuery.mediaText = rule.conditionText;
					self.currentQuery.index = nextQueryIndex;
					self.currentQuery.rule = rule;
					self.enableMediaQuery(rule);
					self.updateViewLabel();
					self.updateURL();
					self.dispatchViewChange();
				}
				else {
					self.disableMediaQuery(rule);
				}

				queryIndex++;
			}
		}
	}

	/**
	 * Enables a view via media query
	 */
	self.enableMediaQuery = function(rule) {

		try {
			rule.media.mediaText = self.inclusionQuery;
		}
		catch(error) {
			//self.log(error);
			rule.conditionText = self.inclusionQuery;
		}
	}

	self.disableMediaQuery = function(rule) {

		try {
			rule.media.mediaText = self.exclusionQuery;
		}
		catch(error) {
			rule.conditionText = self.exclusionQuery;
		}
	}

	self.dispatchViewChange = function() {
		try {
			var event = new Event(self.NAVIGATION_CHANGE);
			window.dispatchEvent(event);
		}
		catch (error) {
			// In IE 11: Object doesn't support this action
		}
	}

	self.getNumberOfMediaRules = function() {
		var rules = self.getStylesheetRules();
		var numberOfRules = rules ? rules.length : 0;
		var numberOfQueries = 0;

		for (var i=0;i<numberOfRules;i++) {
			if (rules[i].media!=null) { numberOfQueries++; }
		}
		
		return numberOfQueries;
	}

	/////////////////////////////////////////
	// VIEW SCALE 
	/////////////////////////////////////////

	self.sliderChangeHandler = function(event) {
		var value = self.getShortNumber(event.currentTarget.value/100);
		var view = self.getVisibleView();
		self.setViewScaleValue(view, false, value, true);
	}

	self.updateSliderValue = function(scale) {
		var slider = document.getElementById(self.viewScaleSliderId);
		var tooltip = parseInt(scale * 100 + "") + "%";
		var inputType;
		var inputValue;
		
		if (slider) {
			inputValue = self.getShortNumber(scale * 100);
			if (inputValue!=slider["value"]) {
				slider["value"] = inputValue;
			}
			inputType = slider.getAttributeNS(null, "type");

			if (inputType!="range") {
				// input range is not supported
				slider.style.display = "none";
			}

			self.setTooltip(slider, tooltip);
		}
	}

	self.viewChangeHandler = function(event) {
		var view = self.getVisibleView();
		var matrix = view ? getComputedStyle(view).transform : null;
		
		if (matrix) {
			self.viewScale = self.getViewScaleValue(view);
			
			var scaleNeededToFit = self.getViewFitToViewportScale(view);
			var isViewLargerThanViewport = scaleNeededToFit<1;
			
			// scale large view to fit if scale to fit is enabled
			if (self.scaleViewsToFit) {
				self.scaleViewToFit(view);
			}
			else {
				self.updateSliderValue(self.viewScale);
			}
		}
	}

	self.getViewScaleValue = function(view) {
		var matrix = getComputedStyle(view).transform;

		if (matrix) {
			var matrixArray = matrix.replace("matrix(", "").split(",");
			var scaleX = parseFloat(matrixArray[0]);
			var scaleY = parseFloat(matrixArray[3]);
			var scale = Math.min(scaleX, scaleY);
		}

		return scale;
	}

	/**
	 * Scales view to scale. 
	 * @param {Object} view view to scale. views are in views array
	 * @param {Boolean} scaleToFit set to true to scale to fit. set false to use desired scale value
	 * @param {Number} desiredScale scale to define. not used if scale to fit is false
	 * @param {Boolean} isSliderChange indicates if slider is callee
	 */
	self.setViewScaleValue = function(view, scaleToFit, desiredScale, isSliderChange) {
		var enableScaleUp = self.enableScaleUp;
		var scaleToFitType = self.scaleToFitType;
		var minimumScale = self.minimumScale;
		var maximumScale = self.maximumScale;
		var hasMinimumScale = !isNaN(minimumScale) && minimumScale!="";
		var hasMaximumScale = !isNaN(maximumScale) && maximumScale!="";
		var scaleNeededToFit = self.getViewFitToViewportScale(view, enableScaleUp);
		var scaleNeededToFitWidth = self.getViewFitToViewportWidthScale(view, enableScaleUp);
		var scaleNeededToFitHeight = self.getViewFitToViewportHeightScale(view, enableScaleUp);
		var scaleToFitFull = self.getViewFitToViewportScale(view, true);
		var scaleToFitFullWidth = self.getViewFitToViewportWidthScale(view, true);
		var scaleToFitFullHeight = self.getViewFitToViewportHeightScale(view, true);
		var scaleToWidth = scaleToFitType=="width";
		var scaleToHeight = scaleToFitType=="height";
		var shrunkToFit = false;
		var topPosition = null;
		var leftPosition = null;
		var translateY = null;
		var translateX = null;
		var transformValue = "";
		var canCenterVertically = true;
		var canCenterHorizontally = true;
		var style = view.style;

		if (view && self.viewsDictionary[view.id] && self.viewsDictionary[view.id].styleDeclaration) {
			style = self.viewsDictionary[view.id].styleDeclaration.style;
		}

		if (scaleToFit && isSliderChange!=true) {
			if (scaleToFitType=="fit" || scaleToFitType=="") {
				desiredScale = scaleNeededToFit;
			}
			else if (scaleToFitType=="width") {
				desiredScale = scaleNeededToFitWidth;
			}
			else if (scaleToFitType=="height") {
				desiredScale = scaleNeededToFitHeight;
			}
		}
		else {
			if (isNaN(desiredScale)) {
				desiredScale = 1;
			}
		}

		self.updateSliderValue(desiredScale);
		
		// scale to fit width
		if (scaleToWidth && scaleToHeight==false) {
			canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFitWidth;
			canCenterHorizontally = scaleNeededToFitWidth>=1 && enableScaleUp==false;

			if (isSliderChange) {
				canCenterHorizontally = desiredScale<scaleToFitFullWidth;
			}
			else if (scaleToFit) {
				desiredScale = scaleNeededToFitWidth;
			}

			if (hasMinimumScale) {
				desiredScale = Math.max(desiredScale, Number(minimumScale));
			}

			if (hasMaximumScale) {
				desiredScale = Math.min(desiredScale, Number(maximumScale));
			}

			desiredScale = self.getShortNumber(desiredScale);

			canCenterHorizontally = self.canCenterHorizontally(view, "width", enableScaleUp, desiredScale, minimumScale, maximumScale);
			canCenterVertically = self.canCenterVertically(view, "width", enableScaleUp, desiredScale, minimumScale, maximumScale);

			if (desiredScale>1 && (enableScaleUp || isSliderChange)) {
				transformValue = "scale(" + desiredScale + ")";
			}
			else if (desiredScale>=1 && enableScaleUp==false) {
				transformValue = "scale(" + 1 + ")";
			}
			else {
				transformValue = "scale(" + desiredScale + ")";
			}

			if (self.centerVertically) {
				if (canCenterVertically) {
					translateY = "-50%";
					topPosition = "50%";
				}
				else {
					translateY = "0";
					topPosition = "0";
				}
				
				if (style.top != topPosition) {
					style.top = topPosition + "";
				}

				if (canCenterVertically) {
					transformValue += " translateY(" + translateY+ ")";
				}
			}

			if (self.centerHorizontally) {
				if (canCenterHorizontally) {
					translateX = "-50%";
					leftPosition = "50%";
				}
				else {
					translateX = "0";
					leftPosition = "0";
				}

				if (style.left != leftPosition) {
					style.left = leftPosition + "";
				}

				if (canCenterHorizontally) {
					transformValue += " translateX(" + translateX+ ")";
				}
			}

			style.transformOrigin = "0 0";
			style.transform = transformValue;

			self.viewScale = desiredScale;
			self.viewToFitWidthScale = scaleNeededToFitWidth;
			self.viewToFitHeightScale = scaleNeededToFitHeight;
			self.viewLeft = leftPosition;
			self.viewTop = topPosition;

			return desiredScale;
		}

		// scale to fit height
		if (scaleToHeight && scaleToWidth==false) {
			//canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFitWidth;
			//canCenterHorizontally = scaleNeededToFitHeight<=scaleNeededToFitWidth && enableScaleUp==false;
			canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFitWidth;
			canCenterHorizontally = scaleNeededToFitWidth>=1 && enableScaleUp==false;
			
			if (isSliderChange) {
				canCenterHorizontally = desiredScale<scaleToFitFullHeight;
			}
			else if (scaleToFit) {
				desiredScale = scaleNeededToFitHeight;
			}

			if (hasMinimumScale) {
				desiredScale = Math.max(desiredScale, Number(minimumScale));
			}

			if (hasMaximumScale) {
				desiredScale = Math.min(desiredScale, Number(maximumScale));
				//canCenterVertically = desiredScale>=scaleNeededToFitHeight && enableScaleUp==false;
			}

			desiredScale = self.getShortNumber(desiredScale);

			canCenterHorizontally = self.canCenterHorizontally(view, "height", enableScaleUp, desiredScale, minimumScale, maximumScale);
			canCenterVertically = self.canCenterVertically(view, "height", enableScaleUp, desiredScale, minimumScale, maximumScale);

			if (desiredScale>1 && (enableScaleUp || isSliderChange)) {
				transformValue = "scale(" + desiredScale + ")";
			}
			else if (desiredScale>=1 && enableScaleUp==false) {
				transformValue = "scale(" + 1 + ")";
			}
			else {
				transformValue = "scale(" + desiredScale + ")";
			}

			if (self.centerHorizontally) {
				if (canCenterHorizontally) {
					translateX = "-50%";
					leftPosition = "50%";
				}
				else {
					translateX = "0";
					leftPosition = "0";
				}

				if (style.left != leftPosition) {
					style.left = leftPosition + "";
				}

				if (canCenterHorizontally) {
					transformValue += " translateX(" + translateX+ ")";
				}
			}

			if (self.centerVertically) {
				if (canCenterVertically) {
					translateY = "-50%";
					topPosition = "50%";
				}
				else {
					translateY = "0";
					topPosition = "0";
				}
				
				if (style.top != topPosition) {
					style.top = topPosition + "";
				}

				if (canCenterVertically) {
					transformValue += " translateY(" + translateY+ ")";
				}
			}

			style.transformOrigin = "0 0";
			style.transform = transformValue;

			self.viewScale = desiredScale;
			self.viewToFitWidthScale = scaleNeededToFitWidth;
			self.viewToFitHeightScale = scaleNeededToFitHeight;
			self.viewLeft = leftPosition;
			self.viewTop = topPosition;

			return scaleNeededToFitHeight;
		}

		if (scaleToFitType=="fit") {
			//canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFitWidth;
			//canCenterHorizontally = scaleNeededToFitWidth>=scaleNeededToFitHeight;
			canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFit;
			canCenterHorizontally = scaleNeededToFitWidth>=scaleNeededToFit;

			if (hasMinimumScale) {
				desiredScale = Math.max(desiredScale, Number(minimumScale));
			}

			desiredScale = self.getShortNumber(desiredScale);

			if (isSliderChange || scaleToFit==false) {
				canCenterVertically = scaleToFitFullHeight>=desiredScale;
				canCenterHorizontally = desiredScale<scaleToFitFullWidth;
			}
			else if (scaleToFit) {
				desiredScale = scaleNeededToFit;
			}

			transformValue = "scale(" + desiredScale + ")";

			//canCenterHorizontally = self.canCenterHorizontally(view, "fit", false, desiredScale);
			//canCenterVertically = self.canCenterVertically(view, "fit", false, desiredScale);
			
			if (self.centerVertically) {
				if (canCenterVertically) {
					translateY = "-50%";
					topPosition = "50%";
				}
				else {
					translateY = "0";
					topPosition = "0";
				}
				
				if (style.top != topPosition) {
					style.top = topPosition + "";
				}

				if (canCenterVertically) {
					transformValue += " translateY(" + translateY+ ")";
				}
			}

			if (self.centerHorizontally) {
				if (canCenterHorizontally) {
					translateX = "-50%";
					leftPosition = "50%";
				}
				else {
					translateX = "0";
					leftPosition = "0";
				}

				if (style.left != leftPosition) {
					style.left = leftPosition + "";
				}

				if (canCenterHorizontally) {
					transformValue += " translateX(" + translateX+ ")";
				}
			}

			style.transformOrigin = "0 0";
			style.transform = transformValue;

			self.viewScale = desiredScale;
			self.viewToFitWidthScale = scaleNeededToFitWidth;
			self.viewToFitHeightScale = scaleNeededToFitHeight;
			self.viewLeft = leftPosition;
			self.viewTop = topPosition;

			self.updateSliderValue(desiredScale);
			
			return desiredScale;
		}

		if (scaleToFitType=="default" || scaleToFitType=="") {
			desiredScale = 1;

			if (hasMinimumScale) {
				desiredScale = Math.max(desiredScale, Number(minimumScale));
			}
			if (hasMaximumScale) {
				desiredScale = Math.min(desiredScale, Number(maximumScale));
			}

			canCenterHorizontally = self.canCenterHorizontally(view, "none", false, desiredScale, minimumScale, maximumScale);
			canCenterVertically = self.canCenterVertically(view, "none", false, desiredScale, minimumScale, maximumScale);

			if (self.centerVertically) {
				if (canCenterVertically) {
					translateY = "-50%";
					topPosition = "50%";
				}
				else {
					translateY = "0";
					topPosition = "0";
				}
				
				if (style.top != topPosition) {
					style.top = topPosition + "";
				}

				if (canCenterVertically) {
					transformValue += " translateY(" + translateY+ ")";
				}
			}

			if (self.centerHorizontally) {
				if (canCenterHorizontally) {
					translateX = "-50%";
					leftPosition = "50%";
				}
				else {
					translateX = "0";
					leftPosition = "0";
				}

				if (style.left != leftPosition) {
					style.left = leftPosition + "";
				}

				if (canCenterHorizontally) {
					transformValue += " translateX(" + translateX+ ")";
				}
				else {
					transformValue += " translateX(" + 0 + ")";
				}
			}

			style.transformOrigin = "0 0";
			style.transform = transformValue;


			self.viewScale = desiredScale;
			self.viewToFitWidthScale = scaleNeededToFitWidth;
			self.viewToFitHeightScale = scaleNeededToFitHeight;
			self.viewLeft = leftPosition;
			self.viewTop = topPosition;

			self.updateSliderValue(desiredScale);
			
			return desiredScale;
		}
	}

	/**
	 * Returns true if view can be centered horizontally
	 * @param {HTMLElement} view view
	 * @param {String} type type of scaling - width, height, all, none
	 * @param {Boolean} scaleUp if scale up enabled 
	 * @param {Number} scale target scale value 
	 */
	self.canCenterHorizontally = function(view, type, scaleUp, scale, minimumScale, maximumScale) {
		var scaleNeededToFit = self.getViewFitToViewportScale(view, scaleUp);
		var scaleNeededToFitHeight = self.getViewFitToViewportHeightScale(view, scaleUp);
		var scaleNeededToFitWidth = self.getViewFitToViewportWidthScale(view, scaleUp);
		var canCenter = false;
		var minScale;

		type = type==null ? "none" : type;
		scale = scale==null ? scale : scaleNeededToFitWidth;
		scaleUp = scaleUp == null ? false : scaleUp;

		if (type=="width") {
	
			if (scaleUp && maximumScale==null) {
				canCenter = false;
			}
			else if (scaleNeededToFitWidth>=1) {
				canCenter = true;
			}
		}
		else if (type=="height") {
			minScale = Math.min(1, scaleNeededToFitHeight);
			if (minimumScale!="" && maximumScale!="") {
				minScale = Math.max(minimumScale, Math.min(maximumScale, scaleNeededToFitHeight));
			}
			else {
				if (minimumScale!="") {
					minScale = Math.max(minimumScale, scaleNeededToFitHeight);
				}
				if (maximumScale!="") {
					minScale = Math.max(minimumScale, Math.min(maximumScale, scaleNeededToFitHeight));
				}
			}
	
			if (scaleUp && maximumScale=="") {
				canCenter = false;
			}
			else if (scaleNeededToFitWidth>=minScale) {
				canCenter = true;
			}
		}
		else if (type=="fit") {
			canCenter = scaleNeededToFitWidth>=scaleNeededToFit;
		}
		else {
			if (scaleUp) {
				canCenter = false;
			}
			else if (scaleNeededToFitWidth>=1) {
				canCenter = true;
			}
		}

		self.horizontalScrollbarsNeeded = canCenter;
		
		return canCenter;
	}

	/**
	 * Returns true if view can be centered horizontally
	 * @param {HTMLElement} view view to scale
	 * @param {String} type type of scaling
	 * @param {Boolean} scaleUp if scale up enabled 
	 * @param {Number} scale target scale value 
	 */
	self.canCenterVertically = function(view, type, scaleUp, scale, minimumScale, maximumScale) {
		var scaleNeededToFit = self.getViewFitToViewportScale(view, scaleUp);
		var scaleNeededToFitWidth = self.getViewFitToViewportWidthScale(view, scaleUp);
		var scaleNeededToFitHeight = self.getViewFitToViewportHeightScale(view, scaleUp);
		var canCenter = false;
		var minScale;

		type = type==null ? "none" : type;
		scale = scale==null ? 1 : scale;
		scaleUp = scaleUp == null ? false : scaleUp;
	
		if (type=="width") {
			canCenter = scaleNeededToFitHeight>=scaleNeededToFitWidth;
		}
		else if (type=="height") {
			minScale = Math.max(minimumScale, Math.min(maximumScale, scaleNeededToFit));
			canCenter = scaleNeededToFitHeight>=minScale;
		}
		else if (type=="fit") {
			canCenter = scaleNeededToFitHeight>=scaleNeededToFit;
		}
		else {
			if (scaleUp) {
				canCenter = false;
			}
			else if (scaleNeededToFitHeight>=1) {
				canCenter = true;
			}
		}

		self.verticalScrollbarsNeeded = canCenter;
		
		return canCenter;
	}

	self.getViewFitToViewportScale = function(view, scaleUp) {
		var enableScaleUp = scaleUp;
		var availableWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
		var availableHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
		var elementWidth = parseFloat(getComputedStyle(view, "style").width);
		var elementHeight = parseFloat(getComputedStyle(view, "style").height);
		var newScale = 1;

		// if element is not added to the document computed values are NaN
		if (isNaN(elementWidth) || isNaN(elementHeight)) {
			return newScale;
		}

		availableWidth -= self.horizontalPadding;
		availableHeight -= self.verticalPadding;

		if (enableScaleUp) {
			newScale = Math.min(availableHeight/elementHeight, availableWidth/elementWidth);
		}
		else if (elementWidth > availableWidth || elementHeight > availableHeight) {
			newScale = Math.min(availableHeight/elementHeight, availableWidth/elementWidth);
		}
		
		return newScale;
	}

	self.getViewFitToViewportWidthScale = function(view, scaleUp) {
		// need to get browser viewport width when element
		var isParentWindow = view && view.parentNode && view.parentNode===document.body;
		var enableScaleUp = scaleUp;
		var availableWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
		var elementWidth = parseFloat(getComputedStyle(view, "style").width);
		var newScale = 1;

		// if element is not added to the document computed values are NaN
		if (isNaN(elementWidth)) {
			return newScale;
		}

		availableWidth -= self.horizontalPadding;

		if (enableScaleUp) {
			newScale = availableWidth/elementWidth;
		}
		else if (elementWidth > availableWidth) {
			newScale = availableWidth/elementWidth;
		}
		
		return newScale;
	}

	self.getViewFitToViewportHeightScale = function(view, scaleUp) {
		var enableScaleUp = scaleUp;
		var availableHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
		var elementHeight = parseFloat(getComputedStyle(view, "style").height);
		var newScale = 1;

		// if element is not added to the document computed values are NaN
		if (isNaN(elementHeight)) {
			return newScale;
		}

		availableHeight -= self.verticalPadding;

		if (enableScaleUp) {
			newScale = availableHeight/elementHeight;
		}
		else if (elementHeight > availableHeight) {
			newScale = availableHeight/elementHeight;
		}
		
		return newScale;
	}

	self.keypressHandler = function(event) {
		var rightKey = 39;
		var leftKey = 37;
		
		// listen for both events 
		if (event.type=="keypress") {
			window.removeEventListener("keyup", self.keypressHandler);
		}
		else {
			window.removeEventListener("keypress", self.keypressHandler);
		}
		
		if (self.showNavigationControls) {
			if (self.navigationOnKeypress) {
				if (event.keyCode==rightKey) {
					self.nextView();
				}
				if (event.keyCode==leftKey) {
					self.previousView();
				}
			}
		}
		else if (self.navigationOnKeypress) {
			if (event.keyCode==rightKey) {
				self.nextView();
			}
			if (event.keyCode==leftKey) {
				self.previousView();
			}
		}
	}

	///////////////////////////////////
	// GENERAL FUNCTIONS
	///////////////////////////////////

	self.getViewById = function(id) {
		id = id ? id.replace("#", "") : "";
		var view = self.viewIds.indexOf(id)!=-1 && self.getElement(id);
		return view;
	}

	self.getViewIds = function() {
		var viewIds = self.getViewPreferenceValue(document.body, self.prefix + "view-ids");
		var viewId = null;

		viewIds = viewIds!=null && viewIds!="" ? viewIds.split(",") : [];

		if (viewIds.length==0) {
			viewId = self.getViewPreferenceValue(document.body, self.prefix + "view-id");
			viewIds = viewId ? [viewId] : [];
		}

		return viewIds;
	}

	self.getInitialViewId = function() {
		var viewId = self.getViewPreferenceValue(document.body, self.prefix + "view-id");
		return viewId;
	}

	self.getApplicationStylesheet = function() {
		var stylesheetId = self.getViewPreferenceValue(document.body, self.prefix + "stylesheet-id");
		self.applicationStylesheet = document.getElementById("applicationStylesheet");
		return self.applicationStylesheet.sheet;
	}

	self.getVisibleView = function() {
		var viewIds = self.getViewIds();
		
		for (var i=0;i<viewIds.length;i++) {
			var viewId = viewIds[i].replace(/[\#?\.?](.*)/, "$" + "1");
			var view = self.getElement(viewId);
			var postName = "_Class";

			if (view==null && viewId && viewId.lastIndexOf(postName)!=-1) {
				view = self.getElement(viewId.replace(postName, ""));
			}
			
			if (view) {
				var display = getComputedStyle(view).display;
		
				if (display=="block" || display=="flex") {
					return view;
				}
			}
		}

		return null;
	}

	self.getVisibleViews = function() {
		var viewIds = self.getViewIds();
		var views = [];
		
		for (var i=0;i<viewIds.length;i++) {
			var viewId = viewIds[i].replace(/[\#?\.?](.*)/, "$" + "1");
			var view = self.getElement(viewId);
			var postName = "_Class";

			if (view==null && viewId && viewId.lastIndexOf(postName)!=-1) {
				view = self.getElement(viewId.replace(postName, ""));
			}
			
			if (view) {
				var display = getComputedStyle(view).display;
				
				if (display=="none") {
					continue;
				}

				if (display=="block" || display=="flex") {
					views.push(view);
				}
			}
		}

		return views;
	}

	self.getStateNameByViewId = function(id) {
		var state = self.viewsDictionary[id];
		return state && state.stateName;
	}

	self.getMatchingViews = function(ids) {
		var views = self.addedViews.slice(0);
		var matchingViews = [];

		if (self.showByMediaQuery) {
			for (let index = 0; index < views.length; index++) {
				var viewId = views[index];
				var state = self.viewsDictionary[viewId];
				var rule = state && state.rule; 
				var matchResults = window.matchMedia(rule.conditionText);
				var view = self.views[viewId];
				
				if (matchResults.matches) {
					if (ids==true) {
						matchingViews.push(viewId);
					}
					else {
						matchingViews.push(view);
					}
				}
			}
		}

		return matchingViews;
	}

	self.ruleMatchesQuery = function(rule) {
		var result = window.matchMedia(rule.conditionText);
		return result.matches;
	}

	self.getViewsByStateName = function(stateName, matchQuery) {
		var views = self.addedViews.slice(0);
		var matchingViews = [];

		if (self.showByMediaQuery) {

			// find state name
			for (let index = 0; index < views.length; index++) {
				var viewId = views[index];
				var state = self.viewsDictionary[viewId];
				var rule = state.rule;
				var mediaRule = state.mediaRule;
				var view = self.views[viewId];
				var viewStateName = self.getStyleRuleValue(mediaRule, self.STATE_NAME, state);
				var stateFoundAtt = view.getAttribute(self.STATE_NAME)==state;
				var matchesResults = false;
				
				if (viewStateName==stateName) {
					if (matchQuery) {
						matchesResults = self.ruleMatchesQuery(rule);

						if (matchesResults) {
							matchingViews.push(view);
						}
					}
					else {
						matchingViews.push(view);
					}
				}
			}
		}

		return matchingViews;
	}

	self.getInitialView = function() {
		var viewId = self.getInitialViewId();
		viewId = viewId.replace(/[\#?\.?](.*)/, "$" + "1");
		var view = self.getElement(viewId);
		var postName = "_Class";

		if (view==null && viewId && viewId.lastIndexOf(postName)!=-1) {
			view = self.getElement(viewId.replace(postName, ""));
		}

		return view;
	}

	self.getViewIndex = function(view) {
		var viewIds = self.getViewIds();
		var id = view ? view.id : null;
		var index = id && viewIds ? viewIds.indexOf(id) : -1;

		return index;
	}

	self.syncronizeViewToURL = function() {
		var fragment = self.getHashFragment();

		if (self.showByMediaQuery) {
			var stateName = fragment;
			
			if (stateName==null || stateName=="") {
				var initialView = self.getInitialView();
				stateName = initialView ? self.getStateNameByViewId(initialView.id) : null;
			}
			
			self.showMediaQueryViewsByState(stateName);
			return;
		}

		var view = self.getViewById(fragment);
		var index = view ? self.getViewIndex(view) : 0;
		if (index==-1) index = 0;
		var currentView = self.hideViews(index);

		if (self.supportsPopState && currentView) {

			if (fragment==null) {
				window.history.replaceState({name:currentView.id}, null, "#"+ currentView.id);
			}
			else {
				window.history.pushState({name:currentView.id}, null, "#"+ currentView.id);
			}
		}
		
		self.setViewVariables(view);
		return view;
	}

	/**
	 * Set the currentView or currentOverlay properties and set the lastView or lastOverlay properties
	 */
	self.setViewVariables = function(view, overlay, parentView) {
		if (view) {
			if (self.currentView) {
				self.lastView = self.currentView;
			}
			self.currentView = view;
		}

		if (overlay) {
			if (self.currentOverlay) {
				self.lastOverlay = self.currentOverlay;
			}
			self.currentOverlay = overlay;
		}
	}

	self.getViewPreferenceBoolean = function(view, property, altValue) {
		var computedStyle = window.getComputedStyle(view);
		var value = computedStyle.getPropertyValue(property);
		var type = typeof value;
		
		if (value=="true" || (type=="string" && value.indexOf("true")!=-1)) {
			return true;
		}
		else if (value=="" && arguments.length==3) {
			return altValue;
		}

		return false;
	}

	self.getViewPreferenceValue = function(view, property, defaultValue) {
		var value = window.getComputedStyle(view).getPropertyValue(property);

		if (value===undefined) {
			return defaultValue;
		}
		
		value = value.replace(/^[\s\"]*/, "");
		value = value.replace(/[\s\"]*$/, "");
		value = value.replace(/^[\s"]*(.*?)[\s"]*$/, function (match, capture) { 
			return capture;
		});

		return value;
	}

	self.getStyleRuleValue = function(cssRule, property) {
		var value = cssRule ? cssRule.style.getPropertyValue(property) : null;

		if (value===undefined) {
			return null;
		}
		
		value = value.replace(/^[\s\"]*/, "");
		value = value.replace(/[\s\"]*$/, "");
		value = value.replace(/^[\s"]*(.*?)[\s"]*$/, function (match, capture) { 
			return capture;
		});

		return value;
	}

	/**
	 * Get the first defined value of property. Returns empty string if not defined
	 * @param {String} id id of element
	 * @param {String} property 
	 */
	self.getCSSPropertyValueForElement = function(id, property) {
		var styleSheets = document.styleSheets;
		var numOfStylesheets = styleSheets.length;
		var values = [];
		var selectorIDText = "#" + id;
		var selectorClassText = "." + id + "_Class";
		var value;

		for(var i=0;i<numOfStylesheets;i++) {
			var styleSheet = styleSheets[i];
			var cssRules = self.getStylesheetRules(styleSheet);
			var numOfCSSRules = cssRules.length;
			var cssRule;
			
			for (var j=0;j<numOfCSSRules;j++) {
				cssRule = cssRules[j];
				
				if (cssRule.media) {
					var mediaRules = cssRule.cssRules;
					var numOfMediaRules = mediaRules ? mediaRules.length : 0;
					
					for(var k=0;k<numOfMediaRules;k++) {
						var mediaRule = mediaRules[k];
						
						if (mediaRule.selectorText==selectorIDText || mediaRule.selectorText==selectorClassText) {
							
							if (mediaRule.style && mediaRule.style.getPropertyValue(property)!="") {
								value = mediaRule.style.getPropertyValue(property);
								values.push(value);
							}
						}
					}
				}
				else {

					if (cssRule.selectorText==selectorIDText || cssRule.selectorText==selectorClassText) {
						if (cssRule.style && cssRule.style.getPropertyValue(property)!="") {
							value = cssRule.style.getPropertyValue(property);
							values.push(value);
						}
					}
				}
			}
		}

		return values.pop();
	}

	self.getIsStyleDefined = function(id, property) {
		var value = self.getCSSPropertyValueForElement(id, property);
		return value!==undefined && value!="";
	}

	self.collectViews = function() {
		var viewIds = self.getViewIds();

		for (let index = 0; index < viewIds.length; index++) {
			const id = viewIds[index];
			const view = self.getElement(id);
			self.views[id] = view;
		}
		
		self.viewIds = viewIds;
	}

	self.collectOverlays = function() {
		var viewIds = self.getViewIds();
		var ids = [];

		for (let index = 0; index < viewIds.length; index++) {
			const id = viewIds[index];
			const view = self.getViewById(id);
			const isOverlay = view && self.isOverlay(view);
			
			if (isOverlay) {
				ids.push(id);
				self.overlays[id] = view;
			}
		}
		
		self.overlayIds = ids;
	}

	self.collectMediaQueries = function() {
		var viewIds = self.getViewIds();
		var styleSheet = self.getApplicationStylesheet();
		var cssRules = self.getStylesheetRules(styleSheet);
		var numOfCSSRules = cssRules ? cssRules.length : 0;
		var cssRule;
		var id = viewIds.length ? viewIds[0]: ""; // single view
		var selectorIDText = "#" + id;
		var selectorClassText = "." + id + "_Class";
		var viewsNotFound = viewIds.slice();
		var viewsFound = [];
		var selectorText = null;
		var property = self.prefix + "view-id";
		var stateName = self.prefix + "state";
		var stateValue;
		
		for (var j=0;j<numOfCSSRules;j++) {
			cssRule = cssRules[j];
			
			if (cssRule.media) {
				var mediaRules = cssRule.cssRules;
				var numOfMediaRules = mediaRules ? mediaRules.length : 0;
				var mediaViewInfoFound = false;
				var mediaId = null;
				
				for(var k=0;k<numOfMediaRules;k++) {
					var mediaRule = mediaRules[k];

					selectorText = mediaRule.selectorText;
					
					if (selectorText==".mediaViewInfo" && mediaViewInfoFound==false) {

						mediaId = self.getStyleRuleValue(mediaRule, property);
						stateValue = self.getStyleRuleValue(mediaRule, stateName);

						selectorIDText = "#" + mediaId;
						selectorClassText = "." + mediaId + "_Class";
						
						// prevent duplicates from load and domcontentloaded events
						if (self.addedViews.indexOf(mediaId)==-1) {
							self.addView(mediaId, cssRule, mediaRule, stateValue);
						}

						viewsFound.push(mediaId);

						if (viewsNotFound.indexOf(mediaId)!=-1) {
							viewsNotFound.splice(viewsNotFound.indexOf(mediaId));
						}

						mediaViewInfoFound = true;
					}

					if (selectorIDText==selectorText || selectorClassText==selectorText) {
						var styleObject = self.viewsDictionary[mediaId];
						if (styleObject) {
							styleObject.styleDeclaration = mediaRule;
						}
						break;
					}
				}
			}
			else {
				selectorText = cssRule.selectorText;
				
				if (selectorText==null) continue;

				selectorText = selectorText.replace(/[#|\s|*]?/g, "");

				if (viewIds.indexOf(selectorText)!=-1) {
					self.addView(selectorText, cssRule, null, stateValue);

					if (viewsNotFound.indexOf(selectorText)!=-1) {
						viewsNotFound.splice(viewsNotFound.indexOf(selectorText));
					}

					break;
				}
			}
		}

		if (viewsNotFound.length) {
			console.log("Could not find the following views:" + viewsNotFound.join(",") + "");
			console.log("Views found:" + viewsFound.join(",") + "");
		}
	}

	/**
	 * Adds a view. A view object contains the id of the view and the style rule
	 * Use enableMediaQuery(rule) to enable
	 * An array of view names are in self.addedViews array
	 */
	self.addView = function(viewId, cssRule, mediaRule, stateName) {
		var state = {name:viewId, rule:cssRule, id:viewId, mediaRule:mediaRule, stateName:stateName};
		self.addedViews.push(viewId);
		self.viewsDictionary[viewId] = state;
		self.mediaQueryDictionary[viewId] = cssRule;
	}

	self.hasView = function(name) {

		if (self.addedViews.indexOf(name)!=-1) {
			return true;
		}
		return false;
	}

	/**
	 * Go to view by id. Views are added in addView()
	 * @param {String} id id of view in current
	 * @param {Boolean} maintainPreviousState if true then do not hide other views
	 * @param {String} parent id of parent view
	 */
	self.goToView = function(id, maintainPreviousState, parent) {
		var state = self.viewsDictionary[id];

		if (state) {
			if (maintainPreviousState==false || maintainPreviousState==null) {
				self.hideViews();
			}
			self.enableMediaQuery(state.rule);
			self.updateViewLabel();
			self.updateURL();
		}
		else {
			var event = new Event(self.STATE_NOT_FOUND);
			self.stateName = id;
			window.dispatchEvent(event);
		}
	}

	/**
	 * Go to the view in the event targets CSS variable
	 */
	self.goToTargetView = function(event) {
		var button = event.currentTarget;
		var buttonComputedStyles = getComputedStyle(button);
		var actionTargetValue = buttonComputedStyles.getPropertyValue(self.prefix+"action-target").trim();
		var animation = buttonComputedStyles.getPropertyValue(self.prefix+"animation").trim();
		var targetType = buttonComputedStyles.getPropertyValue(self.prefix+"action-type").trim();
		var targetView = self.application ? null : self.getElement(actionTargetValue);
		var targetState = targetView ? self.getStateNameByViewId(targetView.id) : null;
		var actionTargetStyles = targetView ? targetView.style : null;
		var state = self.viewsDictionary[actionTargetValue];
		
		// navigate to page
		if (self.application==false || targetType=="page") {
			document.location.href = "./" + actionTargetValue;
			return;
		}

		// if view is found
		if (targetView) {

			if (self.currentOverlay) {
				self.removeOverlay(false);
			}

			if (self.showByMediaQuery) {
				var stateName = targetState;
				
				if (stateName==null || stateName=="") {
					var initialView = self.getInitialView();
					stateName = initialView ? self.getStateNameByViewId(initialView.id) : null;
				}
				self.showMediaQueryViewsByState(stateName, event);
				return;
			}

			// add animation set in event target style declaration
			if (animation && self.supportAnimations) {
				self.crossFade(self.currentView, targetView, false, animation);
			}
			else {
				self.setViewVariables(self.currentView);
				self.hideViews();
				self.enableMediaQuery(state.rule);
				self.scaleViewIfNeeded(targetView);
				self.centerView(targetView);
				self.updateViewLabel();
				self.updateURL();
			}
		}
		else {
			var stateEvent = new Event(self.STATE_NOT_FOUND);
			self.stateName = name;
			window.dispatchEvent(stateEvent);
		}

		event.stopImmediatePropagation();
	}

	/**
	 * Cross fade between views
	 **/
	self.crossFade = function(from, to, update, animation) {
		var targetIndex = to.parentNode
		var fromIndex = Array.prototype.slice.call(from.parentElement.children).indexOf(from);
		var toIndex = Array.prototype.slice.call(to.parentElement.children).indexOf(to);

		if (from.parentNode==to.parentNode) {
			var reverse = self.getReverseAnimation(animation);
			var duration = self.getAnimationDuration(animation, true);

			// if target view is above (higher index)
			// then fade in target view 
			// and after fade in then hide previous view instantly
			if (fromIndex<toIndex) {
				self.setElementAnimation(from, null);
				self.setElementAnimation(to, null);
				self.showViewByMediaQuery(to);
				self.fadeIn(to, update, animation);

				setTimeout(function() {
					self.setElementAnimation(to, null);
					self.setElementAnimation(from, null);
					self.hideView(from);
					self.updateURL();
					self.setViewVariables(to);
					self.updateViewLabel();
				}, duration)
			}
			// if target view is on bottom
			// then show target view instantly 
			// and fade out current view
			else if (fromIndex>toIndex) {
				self.setElementAnimation(to, null);
				self.setElementAnimation(from, null);
				self.showViewByMediaQuery(to);
				self.fadeOut(from, update, reverse);

				setTimeout(function() {
					self.setElementAnimation(to, null);
					self.setElementAnimation(from, null);
					self.hideView(from);
					self.updateURL();
					self.setViewVariables(to);
				}, duration)
			}
		}
	}

	self.fadeIn = function(element, update, animation) {
		self.showViewByMediaQuery(element);

		if (update) {
			self.updateURL(element);

			element.addEventListener("animationend", function(event) {
				element.style.animation = null;
				self.setViewVariables(element);
				self.updateViewLabel();
				element.removeEventListener("animationend", arguments.callee);
			});
		}

		self.setElementAnimation(element, null);
		
		element.style.animation = animation;
	}

	self.fadeOutCurrentView = function(animation, update) {
		if (self.currentView) {
			self.fadeOut(self.currentView, update, animation);
		}
		if (self.currentOverlay) {
			self.fadeOut(self.currentOverlay, update, animation);
		}
	}

	self.fadeOut = function(element, update, animation) {
		if (update) {
			element.addEventListener("animationend", function(event) {
				element.style.animation = null;
				self.hideView(element);
				element.removeEventListener("animationend", arguments.callee);
			});
		}

		element.style.animationPlayState = "paused";
		element.style.animation = animation;
		element.style.animationPlayState = "running";
	}

	self.getReverseAnimation = function(animation) {
		if (animation && animation.indexOf("reverse")==-1) {
			animation += " reverse";
		}

		return animation;
	}

	/**
	 * Get duration in animation string
	 * @param {String} animation animation value
	 * @param {Boolean} inMilliseconds length in milliseconds if true
	 */
	self.getAnimationDuration = function(animation, inMilliseconds) {
		var duration = 0;
		var expression = /.+(\d\.\d)s.+/;

		if (animation && animation.match(expression)) {
			duration = parseFloat(animation.replace(expression, "$" + "1"));
			if (duration && inMilliseconds) duration = duration * 1000;
		}

		return duration;
	}

	self.setElementAnimation = function(element, animation, priority) {
		element.style.setProperty("animation", animation, "important");
	}

	self.getElement = function(id) {
		var elementId = id ? id.trim() : id;
		var element = elementId ? document.getElementById(elementId) : null;

		return element;
	}

	self.getElementByClass = function(className) {
		className = className ? className.trim() : className;
		var elements = document.getElementsByClassName(className);

		return elements.length ? elements[0] : null;
	}

	self.resizeHandler = function(event) {
		
		if (self.showByMediaQuery) {
			if (self.enableDeepLinking) {
				var stateName = self.getHashFragment();

				if (stateName==null || stateName=="") {
					var initialView = self.getInitialView();
					stateName = initialView ? self.getStateNameByViewId(initialView.id) : null;
				}
				self.showMediaQueryViewsByState(stateName, event);
			}
		}
		else {
			var visibleViews = self.getVisibleViews();

			for (let index = 0; index < visibleViews.length; index++) {	
				var view = visibleViews[index];
				self.scaleViewIfNeeded(view);
			}
		}

		window.dispatchEvent(new Event(self.APPLICATION_RESIZE));
	}

	self.scaleViewIfNeeded = function(view) {

		if (self.scaleViewsOnResize) {
			if (view==null) {
				view = self.getVisibleView();
			}

			var isViewScaled = view.getAttributeNS(null, self.SIZE_STATE_NAME)=="false" ? false : true;

			if (isViewScaled) {
				self.scaleViewToFit(view, true);
			}
			else {
				self.scaleViewToActualSize(view);
			}
		}
		else if (view) {
			self.centerView(view);
		}
	}

	self.centerView = function(view) {

		if (self.scaleViewsToFit) {
			self.scaleViewToFit(view, true);
		}
		else {
			self.scaleViewToActualSize(view);  // for centering support for now
		}
	}

	self.preventDoubleClick = function(event) {
		event.stopImmediatePropagation();
	}

	self.getHashFragment = function() {
		var value = window.location.hash ? window.location.hash.replace("#", "") : "";
		return value;
	}

	self.showBlockElement = function(view) {
		view.style.display = "block";
	}

	self.hideElement = function(view) {
		view.style.display = "none";
	}

	self.showStateFunction = null;

	self.showMediaQueryViewsByState = function(state, event) {
		// browser will hide and show by media query (small, medium, large)
		// but if multiple views exists at same size user may want specific view
		// if showStateFunction is defined that is called with state fragment and user can show or hide each media matching view by returning true or false
		// if showStateFunction is not defined and state is defined and view has a defined state that matches then show that and hide other matching views
		// if no state is defined show view 
		// an viewChanging event is dispatched before views are shown or hidden that can be prevented 

		// get all matched queries
		// if state name is specified then show that view and hide other views
		// if no state name is defined then show
		var matchedViews = self.getMatchingViews();
		var matchMediaQuery = true;
		var foundViews = self.getViewsByStateName(state, matchMediaQuery);
		var showViews = [];
		var hideViews = [];

		// loop views that match media query 
		for (let index = 0; index < matchedViews.length; index++) {
			var view = matchedViews[index];
			
			// let user determine visible view
			if (self.showStateFunction!=null) {
				if (self.showStateFunction(view, state)) {
					showViews.push(view);
				}
				else {
					hideViews.push(view);
				}
			}
			// state was defined so check if view matches state
			else if (foundViews.length) {

				if (foundViews.indexOf(view)!=-1) {
					showViews.push(view);
				}
				else {
					hideViews.push(view);
				}
			}
			// if no state names are defined show view (define unused state name to exclude)
			else if (state==null || state=="") {
				showViews.push(view);
			}
		}

		if (showViews.length) {
			var viewChangingEvent = new Event(self.VIEW_CHANGING);
			viewChangingEvent.showViews = showViews;
			viewChangingEvent.hideViews = hideViews;
			window.dispatchEvent(viewChangingEvent);

			if (viewChangingEvent.defaultPrevented==false) {
				for (var index = 0; index < hideViews.length; index++) {
					var view = hideViews[index];

					if (self.isOverlay(view)) {
						self.removeOverlay(view);
					}
					else {
						self.hideElement(view);
					}
				}

				for (var index = 0; index < showViews.length; index++) {
					var view = showViews[index];

					if (index==showViews.length-1) {
						self.clearDisplay(view);
						self.setViewOptions(view);
						self.setViewVariables(view);
						self.centerView(view);
						self.updateURLState(view, state);
					}
				}
			}

			var viewChangeEvent = new Event(self.VIEW_CHANGE);
			viewChangeEvent.showViews = showViews;
			viewChangeEvent.hideViews = hideViews;
			window.dispatchEvent(viewChangeEvent);
		}
		
	}

	self.clearDisplay = function(view) {
		view.style.setProperty("display", null);
	}

	self.hashChangeHandler = function(event) {
		var fragment = self.getHashFragment();
		var view = self.getViewById(fragment);

		if (self.showByMediaQuery) {
			var stateName = fragment;

			if (stateName==null || stateName=="") {
				var initialView = self.getInitialView();
				stateName = initialView ? self.getStateNameByViewId(initialView.id) : null;
			}
			self.showMediaQueryViewsByState(stateName);
		}
		else {
			if (view) {
				self.hideViews();
				self.showView(view);
				self.setViewVariables(view);
				self.updateViewLabel();
				
				window.dispatchEvent(new Event(self.VIEW_CHANGE));
			}
			else {
				window.dispatchEvent(new Event(self.VIEW_NOT_FOUND));
			}
		}
	}

	self.popStateHandler = function(event) {
		var state = event.state;
		var fragment = state ? state.name : window.location.hash;
		var view = self.getViewById(fragment);

		if (view) {
			self.hideViews();
			self.showView(view);
			self.updateViewLabel();
		}
		else {
			window.dispatchEvent(new Event(self.VIEW_NOT_FOUND));
		}
	}

	self.doubleClickHandler = function(event) {
		var view = self.getVisibleView();
		var scaleValue = view ? self.getViewScaleValue(view) : 1;
		var scaleNeededToFit = view ? self.getViewFitToViewportScale(view) : 1;
		var scaleNeededToFitWidth = view ? self.getViewFitToViewportWidthScale(view) : 1;
		var scaleNeededToFitHeight = view ? self.getViewFitToViewportHeightScale(view) : 1;
		var scaleToFitType = self.scaleToFitType;

		// Three scenarios
		// - scale to fit on double click
		// - set scale to actual size on double click
		// - switch between scale to fit and actual page size

		if (scaleToFitType=="width") {
			scaleNeededToFit = scaleNeededToFitWidth;
		}
		else if (scaleToFitType=="height") {
			scaleNeededToFit = scaleNeededToFitHeight;
		}

		// if scale and actual size enabled then switch between
		if (self.scaleToFitOnDoubleClick && self.actualSizeOnDoubleClick) {
			var isViewScaled = view.getAttributeNS(null, self.SIZE_STATE_NAME);
			var isScaled = false;
			
			// if scale is not 1 then view needs scaling
			if (scaleNeededToFit!=1) {

				// if current scale is at 1 it is at actual size
				// scale it to fit
				if (scaleValue==1) {
					self.scaleViewToFit(view);
					isScaled = true;
				}
				else {
					// scale is not at 1 so switch to actual size
					self.scaleViewToActualSize(view);
					isScaled = false;
				}
			}
			else {
				// view is smaller than viewport 
				// so scale to fit() is scale actual size
				// actual size and scaled size are the same
				// but call scale to fit to retain centering
				self.scaleViewToFit(view);
				isScaled = false;
			}
			
			view.setAttributeNS(null, self.SIZE_STATE_NAME, isScaled+"");
			isViewScaled = view.getAttributeNS(null, self.SIZE_STATE_NAME);
		}
		else if (self.scaleToFitOnDoubleClick) {
			self.scaleViewToFit(view);
		}
		else if (self.actualSizeOnDoubleClick) {
			self.scaleViewToActualSize(view);
		}

	}

	self.scaleViewToFit = function(view) {
		return self.setViewScaleValue(view, true);
	}

	self.scaleViewToActualSize = function(view) {
		self.setViewScaleValue(view, false, 1);
	}

	self.onloadHandler = function(event) {
		self.initialize();
	}

	self.setElementHTML = function(id, value) {
		var element = self.getElement(id);
		element.innerHTML = value;
	}

	self.getStackArray = function(error) {
		var value = "";
		
		if (error==null) {
		  try {
			 error = new Error("Stack");
		  }
		  catch (e) {
			 
		  }
		}
		
		if ("stack" in error) {
		  value = error.stack;
		  var methods = value.split(/\n/g);
	 
		  var newArray = methods ? methods.map(function (value, index, array) {
			 value = value.replace(/\@.*/,"");
			 return value;
		  }) : null;
	 
		  if (newArray && newArray[0].includes("getStackTrace")) {
			 newArray.shift();
		  }
		  if (newArray && newArray[0].includes("getStackArray")) {
			 newArray.shift();
		  }
		  if (newArray && newArray[0]=="") {
			 newArray.shift();
		  }
	 
			return newArray;
		}
		
		return null;
	}

	self.log = function(value) {
		console.log.apply(this, [value]);
	}
	
	// initialize on load
	// sometimes the body size is 0 so we call this now and again later
	window.addEventListener("load", self.onloadHandler);
	window.document.addEventListener("DOMContentLoaded", self.onloadHandler);
}

window.application = new Application();
</script>
</head>
<body>
<div id="Web_1920__1">
	<svg class="Ellipse_5">
		<ellipse id="Ellipse_5" rx="8.5" ry="8.5" cx="8.5" cy="8.5">
		</ellipse>
	</svg>
	<svg class="Rectangle_1_k">
		<linearGradient id="Rectangle_1_k" spreadMethod="pad" x1="0" x2="1" y1="0.5" y2="0.5">
			<stop offset="0" stop-color="#063974" stop-opacity="1"></stop>
			<stop offset="1" stop-color="#031d3a" stop-opacity="1"></stop>
		</linearGradient>
		<rect id="Rectangle_1_k" rx="15" ry="15" x="0" y="0" width="1775" height="1055">
		</rect>
	</svg>
	<div id="Icon_ionic-ios-menu">
		<svg class="Path_1" viewBox="4.5 10.125 43.356 2.25">
			<path id="Path_1" d="M 46.04948425292969 12.375 L 6.306499481201172 12.375 C 5.312924385070801 12.375 4.5 11.86874961853027 4.5 11.25 L 4.5 11.25 C 4.5 10.63125038146973 5.312924385070801 10.125 6.306499481201172 10.125 L 46.04948425292969 10.125 C 47.04305648803711 10.125 47.85598373413086 10.63125038146973 47.85598373413086 11.25 L 47.85598373413086 11.25 C 47.85598373413086 11.86874961853027 47.04305648803711 12.375 46.04948425292969 12.375 Z">
			</path>
		</svg>
		<svg class="Path_2" viewBox="4.5 16.875 43.356 2.25">
			<path id="Path_2" d="M 46.04948425292969 19.125 L 6.306499481201172 19.125 C 5.312924385070801 19.125 4.5 18.61874961853027 4.5 18 L 4.5 18 C 4.5 17.38125038146973 5.312924385070801 16.875 6.306499481201172 16.875 L 46.04948425292969 16.875 C 47.04305648803711 16.875 47.85598373413086 17.38125038146973 47.85598373413086 18 L 47.85598373413086 18 C 47.85598373413086 18.61874961853027 47.04305648803711 19.125 46.04948425292969 19.125 Z">
			</path>
		</svg>
		<svg class="Path_3" viewBox="4.5 23.625 43.356 2.25">
			<path id="Path_3" d="M 46.04948425292969 25.875 L 6.306499481201172 25.875 C 5.312924385070801 25.875 4.5 25.36874961853027 4.5 24.75 L 4.5 24.75 C 4.5 24.13125038146973 5.312924385070801 23.625 6.306499481201172 23.625 L 46.04948425292969 23.625 C 47.04305648803711 23.625 47.85598373413086 24.13125038146973 47.85598373413086 24.75 L 47.85598373413086 24.75 C 47.85598373413086 25.36874961853027 47.04305648803711 25.875 46.04948425292969 25.875 Z">
			</path>
		</svg>
	</div>
	<svg class="Icon_awesome-facebook-square" viewBox="0 2.25 31.5 31.5">
		<path id="Icon_awesome-facebook-square" d="M 28.125 2.25 L 3.375 2.25 C 1.511038899421692 2.25 -4.76837158203125e-07 3.76103949546814 0 5.625000476837158 L 0 30.375 C 0 32.23896026611328 1.511039018630981 33.75 3.375000238418579 33.75 L 13.025390625 33.75 L 13.025390625 23.04070281982422 L 8.595703125 23.04070281982422 L 8.595703125 18 L 13.025390625 18 L 13.025390625 14.15812492370605 C 13.025390625 9.788203239440918 15.626953125 7.374374866485596 19.61156272888184 7.374374866485596 C 21.51984405517578 7.374374866485596 23.51531219482422 7.714687347412109 23.51531219482422 7.714687347412109 L 23.51531219482422 12.00374984741211 L 21.31664085388184 12.00374984741211 C 19.15031242370605 12.00374984741211 18.474609375 13.34812450408936 18.474609375 14.72695350646973 L 18.474609375 18 L 23.31070327758789 18 L 22.53726577758789 23.04070281982422 L 18.474609375 23.04070281982422 L 18.474609375 33.75 L 28.125 33.75 C 29.98895835876465 33.75 31.49999809265137 32.23896026611328 31.49999809265137 30.375 L 31.5 5.625 C 31.49999809265137 3.761038780212402 29.98895835876465 2.25 28.12499809265137 2.25 Z">
		</path>
	</svg>
	<svg class="Icon_ionic-logo-twitter" viewBox="1.413 4.5 33.18 27">
		<path id="Icon_ionic-logo-twitter" d="M 34.59375 7.69921875 C 33.37031173706055 8.240625381469727 32.0625 8.606249809265137 30.68437576293945 8.774999618530273 C 32.09062576293945 7.931249618530273 33.17343902587891 6.595312118530273 33.6796875 5.00624942779541 C 32.36484527587891 5.786718368530273 30.90937423706055 6.356249332427979 29.35546875 6.65859317779541 C 28.11093711853027 5.329687595367432 26.33906173706055 4.5 24.38437461853027 4.5 C 20.62265586853027 4.5 17.578125 7.551562309265137 17.578125 11.31328105926514 C 17.578125 11.84765625 17.63437461853027 12.36796855926514 17.75390625 12.8671875 C 12.09375 12.5859375 7.073437690734863 9.871874809265137 3.719531059265137 5.744531154632568 C 3.135937213897705 6.75 2.798437356948853 7.924218654632568 2.798437356948853 9.168749809265137 C 2.798437356948853 11.53125 4.0078125 13.61953163146973 5.8359375 14.84296798706055 C 4.7109375 14.81484413146973 3.65625 14.50546836853027 2.7421875 13.9921875 C 2.7421875 14.02031230926514 2.7421875 14.04843711853027 2.7421875 14.07656288146973 C 2.7421875 17.38125038146973 5.090624809265137 20.13047027587891 8.205469131469727 20.75625038146973 C 7.635937690734863 20.91093826293945 7.031250476837158 20.99531364440918 6.412500381469727 20.99531364440918 C 5.976562976837158 20.99531364440918 5.547656536102295 20.95312690734863 5.132812976837158 20.86875152587891 C 5.99765682220459 23.57578277587891 8.514843940734863 25.54453277587891 11.49609375 25.60078239440918 C 9.168749809265137 27.42890739440918 6.229687690734863 28.51875114440918 3.037500381469727 28.51875114440918 C 2.489062786102295 28.51875114440918 1.947656631469727 28.48359489440918 1.413281679153442 28.42031288146973 C 4.415625095367432 30.375 7.994531154632568 31.5 11.83359336853027 31.5 C 24.37031173706055 31.5 31.21875 21.11484336853027 31.21875 12.10781288146973 C 31.21875 11.8125 31.21171951293945 11.51718807220459 31.19765663146973 11.22890663146973 C 32.52656173706055 10.265625 33.6796875 9.0703125 34.59375 7.69921875 Z">
		</path>
	</svg>
	<svg class="Icon_awesome-youtube" viewBox="1.05 4.5 38.4 27">
		<path id="Icon_awesome-youtube" d="M 38.64761734008789 8.72458553314209 C 38.20598602294922 7.061695098876953 36.90478134155273 5.752054214477539 35.25264739990234 5.307609081268311 C 32.25803756713867 4.5 20.25 4.5 20.25 4.5 C 20.25 4.5 8.242031097412109 4.5 5.24735164642334 5.307609558105469 C 3.595218658447266 5.752125263214111 2.294015645980835 7.061695575714111 1.852382898330688 8.724586486816406 C 1.049976587295532 11.73867225646973 1.049976587295532 18.02728271484375 1.049976587295532 18.02728271484375 C 1.049976587295532 18.02728271484375 1.049976587295532 24.31589126586914 1.852382898330688 27.32997894287109 C 2.294015645980835 28.99287033081055 3.595218658447266 30.24794769287109 5.24735164642334 30.69239234924316 C 8.242031097412109 31.5 20.25 31.5 20.25 31.5 C 20.25 31.5 32.25796890258789 31.5 35.25264739990234 30.69239044189453 C 36.90478134155273 30.24794578552246 38.20598220825195 28.99286651611328 38.64761734008789 27.32997703552246 C 39.45002365112305 24.31589126586914 39.45002365112305 18.02728271484375 39.45002365112305 18.02728271484375 C 39.45002365112305 18.02728271484375 39.45002365112305 11.73867321014404 38.64761734008789 8.724587440490723 Z M 16.32269477844238 23.73686599731445 L 16.32269477844238 12.31769561767578 L 26.35903167724609 18.02742195129395 L 16.32269668579102 23.73686790466309 Z">
		</path>
	</svg>
	<svg class="Icon_awesome-phone-alt" viewBox="0 0 39.356 39.356">
		<path id="Icon_awesome-phone-alt" d="M 38.23341751098633 27.81083106994629 L 29.62418937683105 24.12116241455078 C 28.86867523193359 23.79917907714844 27.99128532409668 24.01539039611816 27.47188377380371 24.65155410766602 L 23.65922737121582 29.30976104736328 C 17.67562103271484 26.48855018615723 12.86019134521484 21.67312240600586 10.03897380828857 15.68951034545898 L 14.69717884063721 11.87684631347656 C 15.33471870422363 11.35831546783447 15.55117893218994 10.47992420196533 15.22756862640381 9.724540710449219 L 11.5378999710083 1.11531388759613 C 11.18129253387451 0.2977347075939178 10.29380702972412 -0.1508487015962601 9.424026489257813 0.0468476414680481 L 1.429746627807617 1.891681909561157 C 0.5926622152328491 2.084982633590698 -0.0001924770913319662 2.830512523651123 1.111447556212397e-08 3.689625978469849 C 1.111447556212397e-08 23.40629005432129 15.98087501525879 39.35641860961914 35.66679382324219 39.35641860961914 C 36.52619934082031 39.35697174072266 37.27214813232422 38.7640380859375 37.46551132202148 37.92667388916016 L 39.31034088134766 29.93239212036133 C 39.50674819946289 29.05843544006348 39.0548210144043 28.16813850402832 38.23341751098633 27.81083297729492 Z">
		</path>
	</svg>
	<svg class="Icon_awesome-user-alt" viewBox="0 0 39.36 39.36">
		<path id="Icon_awesome-user-alt" d="M 19.68000030517578 22.13999938964844 C 25.79156112670898 22.13999938964844 30.75 17.18156242370605 30.75 11.06999969482422 C 30.75 4.958437442779541 25.79156112670898 0 19.68000030517578 0 C 13.56843757629395 0 8.609999656677246 4.958437442779541 8.609999656677246 11.06999969482422 C 8.609999656677246 17.18156242370605 13.56843757629395 22.13999938964844 19.68000030517578 22.13999938964844 Z M 29.51999855041504 24.59999847412109 L 25.28418731689453 24.59999847412109 C 23.57756233215332 25.38412475585938 21.67874908447266 25.82999992370605 19.68000030517578 25.82999992370605 C 17.68124961853027 25.82999992370605 15.79012489318848 25.38412475585938 14.07581233978271 24.59999847412109 L 9.840000152587891 24.59999847412109 C 4.404937744140625 24.59999847412109 0 29.00493621826172 0 34.43999862670898 L 0 35.66999816894531 C 0 37.70718765258789 1.652812480926514 39.36000061035156 3.68999981880188 39.36000061035156 L 35.66999816894531 39.36000061035156 C 37.70718765258789 39.36000061035156 39.36000061035156 37.70718765258789 39.36000061035156 35.66999816894531 L 39.36000061035156 34.43999862670898 C 39.36000061035156 29.00493621826172 34.95506286621094 24.59999847412109 29.51999855041504 24.59999847412109 Z">
		</path>
	</svg>
	<img id="Tchibo30dpi150mmRGB" src="Tchibo30dpi150mmRGB.png" srcset="Tchibo30dpi150mmRGB.png 1x, Tchibo30dpi150mmRGB@2x.png 2x">
		
	<div id="Search_Bar">
		<svg class="Rectangle_2">
			<rect id="Rectangle_2" rx="30.5" ry="30.5" x="0" y="0" width="411" height="61">
			</rect>
		</svg>
		<div id="Search">
			<span>Search...</span>
		</div>
		<svg class="Icon_awesome-search" viewBox="0 0 35.997 36.004">
			<path id="Icon_awesome-search" d="M 35.5078125 31.12734413146973 L 28.49765586853027 24.1171875 C 28.18124961853027 23.80078125 27.75234413146973 23.625 27.30234336853027 23.625 L 26.15625 23.625 C 28.09687423706055 21.14296913146973 29.25 18.02109336853027 29.25 14.625 C 29.25 6.546093940734863 22.70390701293945 0 14.625 0 C 6.546092987060547 0 0 6.546093940734863 0 14.625 C 0 22.70390701293945 6.546093940734863 29.25 14.625 29.25 C 18.02109336853027 29.25 21.14296913146973 28.09687423706055 23.625 26.15625 L 23.625 27.30234336853027 C 23.625 27.75234413146973 23.80078125 28.18124961853027 24.1171875 28.49765586853027 L 31.12734413146973 35.5078125 C 31.78828239440918 36.16875076293945 32.85703277587891 36.16875076293945 33.51093673706055 35.5078125 L 35.50078201293945 33.51796722412109 C 36.16172027587891 32.85702896118164 36.16172027587891 31.78828048706055 35.5078125 31.12734222412109 Z M 14.625 23.625 C 9.653905868530273 23.625 5.625 19.60312461853027 5.625 14.625 C 5.625 9.653905868530273 9.646875381469727 5.625 14.625 5.625 C 19.59609413146973 5.625 23.625 9.646875381469727 23.625 14.625 C 23.625 19.59609413146973 19.60312461853027 23.625 14.625 23.625 Z">
			</path>
		</svg>
	</div>
	<div id="Top_Bar">
		<div id="Community_Market">
			<span>Community Market</span>
		</div>
		<div id="Coffee_Kits">
			<span>Coffee Kits</span>
		</div>
		<div id="Coffee_Creator">
			<span>Coffee Creator</span>
		</div>
		<div id="Taste_Test________">
			<span>Taste Test        </span>
		</div>
		<svg class="Line_1" viewBox="0 0 243 3">
			<path id="Line_1" d="M 0 0 L 243 0">
			</path>
		</svg>
		<svg class="Line_2" viewBox="0 0 145 3">
			<path id="Line_2" d="M 0 0 L 145 0">
			</path>
		</svg>
		<svg class="Line_3" viewBox="0 0 187 1">
			<path id="Line_3" d="M 0 0 L 187 1">
			</path>
		</svg>
		<svg class="Line_4" viewBox="0 0 157 3">
			<path id="Line_4" d="M 0 0 L 157 0">
			</path>
		</svg>
		<svg class="Icon_material-timer" viewBox="4.5 1.5 19.5 22.75">
			<path id="Icon_material-timer" d="M 17.5 1.49999988079071 L 11 1.49999988079071 L 11 3.666666746139526 L 17.5 3.666666746139526 L 17.5 1.49999988079071 Z M 13.16666603088379 15.58333301544189 L 15.33333301544189 15.58333301544189 L 15.33333301544189 9.083333015441895 L 13.16666603088379 9.083333015441895 L 13.16666603088379 15.58333301544189 Z M 21.8658332824707 8.422500610351563 L 23.40416526794434 6.884166240692139 C 22.93833160400391 6.331665992736816 22.42916488647461 5.811666488647461 21.87666511535645 5.356666564941406 L 20.33833312988281 6.894999980926514 C 18.65916633605957 5.551666736602783 16.54666519165039 4.749999523162842 14.25 4.749999523162842 C 8.865833282470703 4.749999523162842 4.5 9.115833282470703 4.5 14.5 C 4.5 19.88416481018066 8.855000495910645 24.24999809265137 14.25 24.24999809265137 C 19.64499855041504 24.24999809265137 24 19.88416481018066 24 14.5 C 24 12.20333290100098 23.19833183288574 10.09083366394043 21.8658332824707 8.422500610351563 Z M 14.25 22.08333206176758 C 10.05749988555908 22.08333206176758 6.666666507720947 18.6924991607666 6.666666507720947 14.5 C 6.666666507720947 10.30749988555908 10.05749988555908 6.916666507720947 14.25 6.916666507720947 C 18.4424991607666 6.916666507720947 21.83333206176758 10.30749988555908 21.83333206176758 14.5 C 21.83333206176758 18.6924991607666 18.4424991607666 22.08333206176758 14.25 22.08333206176758 Z">
			</path>
		</svg>
	</div>
	<div id="Coffee_Bag">
		<svg class="Icon_ionic-ios-arrow-back" viewBox="11.251 6.194 38 66.468">
			<path id="Icon_ionic-ios-arrow-back" d="M 22.70583534240723 39.41910552978516 L 47.85557174682617 14.28915977478027 C 49.7155876159668 12.42914962768555 49.7155876159668 9.421468734741211 47.85557174682617 7.581247329711914 C 45.99555969238281 5.721236705780029 42.98788452148438 5.741023063659668 41.12787246704102 7.581247329711914 L 12.63407039642334 36.05525588989258 C 10.83341693878174 37.85589981079102 10.79384422302246 40.74485778808594 12.49555492401123 42.6048698425293 L 41.10808563232422 71.27674865722656 C 42.03809356689453 72.20674896240234 43.26490783691406 72.661865234375 44.4719352722168 72.661865234375 C 45.6789665222168 72.661865234375 46.90578079223633 72.20674896240234 47.83579254150391 71.27674865722656 C 49.69580841064453 69.41673278808594 49.69580841064453 66.4090576171875 47.83579254150391 64.56882476806641 L 22.70583534240723 39.41910552978516 Z">
			</path>
		</svg>
		<svg class="Icon_ionic-ios-arrow-back_bb" viewBox="11.251 6.194 38 66.468">
			<path id="Icon_ionic-ios-arrow-back_bb" d="M 22.70583534240723 39.41910552978516 L 47.85557174682617 14.28915977478027 C 49.7155876159668 12.42914962768555 49.7155876159668 9.421468734741211 47.85557174682617 7.581247329711914 C 45.99555969238281 5.721236705780029 42.98788452148438 5.741023063659668 41.12787246704102 7.581247329711914 L 12.63407039642334 36.05525588989258 C 10.83341693878174 37.85589981079102 10.79384422302246 40.74485778808594 12.49555492401123 42.6048698425293 L 41.10808563232422 71.27674865722656 C 42.03809356689453 72.20674896240234 43.26490783691406 72.661865234375 44.4719352722168 72.661865234375 C 45.6789665222168 72.661865234375 46.90578079223633 72.20674896240234 47.83579254150391 71.27674865722656 C 49.69580841064453 69.41673278808594 49.69580841064453 66.4090576171875 47.83579254150391 64.56882476806641 L 22.70583534240723 39.41910552978516 Z">
			</path>
		</svg>
		<svg class="Ellipse_1">
			<ellipse id="Ellipse_1" rx="167.5" ry="22" cx="167.5" cy="22">
			</ellipse>
		</svg>
		<img id="Ekran_grnts_2021-02-02_164956" src="Ekran_grnts_2021-02-02_164956.png" srcset="Ekran_grnts_2021-02-02_164956.png 1x, Ekran_grnts_2021-02-02_164956@2x.png 2x">
			
	</div>
	<svg class="Rectangle_5">
		<rect id="Rectangle_5" rx="6" ry="6" x="0" y="0" width="202" height="46">
		</rect>
	</svg>
	<svg class="Rectangle_6">
		<rect id="Rectangle_6" rx="100" ry="100" x="0" y="0" width="973" height="672">
		</rect>
	</svg>
	<div id="Main_Content">
		<div id="Chocolate__Caramel_Flavored">
			<span>Chocolate & Caramel Flavored</span>
		</div>
		<svg class="Line_5" viewBox="0 0 507 3">
			<path id="Line_5" d="M 0 0 L 507 0">
			</path>
		</svg>
	</div>
	<div id="Karamel">
		<svg class="Ellipse_2">
			<ellipse id="Ellipse_2" rx="99" ry="28" cx="99" cy="28">
			</ellipse>
		</svg>
		<img id="Balksz-2" src="Balksz-2.png" srcset="Balksz-2.png 1x, Balksz-2@2x.png 2x">
			
	</div>
	<div id="ikolata">
		<svg class="Ellipse_3">
			<ellipse id="Ellipse_3" rx="128" ry="39.5" cx="128" cy="39.5">
			</ellipse>
		</svg>
		<img id="Balksz-3" src="Balksz-3.png" srcset="Balksz-3.png 1x, Balksz-3@2x.png 2x">
			
	</div>
	<div id="Columbia_Coffee_Beans">
		<span>Columbia Coffee Beans</span>
	</div>
	<svg class="Line_5_bq" viewBox="0 0 507 3">
		<path id="Line_5_bq" d="M 0 0 L 507 0">
		</path>
	</svg>
	<div id="This_Colombian_marvel_erupts_o">
		<span>This Colombian marvel erupts on the palate with a juicy feel and<br/>robust flavours, a testament to the  hearty riches of volcanic soils. <br/>Its remarkable finish, medium-bodied and dry with<br/>hints of walnut, liftsthis superior coffee into a class of its own. <br/>One sip and you’ll agree it’s worth every step of the climb.<br/></span><br>
	</div>
	<div id="ID65">
		<span>%65</span>
	</div>
	<div id="ID35">
		<span>%35</span>
	</div>
	<div id="Main_Content_bu">
		<div id="Rates">
			<span>Rates</span>
		</div>
		<svg class="Path_4" viewBox="0 0 127.361 3">
			<path id="Path_4" d="M 0 0 L 127.3607177734375 0">
			</path>
		</svg>
	</div>
	<svg class="Rectangle_7">
		<rect id="Rectangle_7" rx="21" ry="21" x="0" y="0" width="108" height="42">
		</rect>
	</svg>
	<svg class="Rectangle_8">
		<rect id="Rectangle_8" rx="21" ry="21" x="0" y="0" width="108" height="42">
		</rect>
	</svg>
	<div id="Rate_Switch">
		<svg class="Icon_ionic-md-arrow-dropdown" viewBox="9 13.5 18 9">
			<path id="Icon_ionic-md-arrow-dropdown" d="M 9 13.5 L 18 22.5 L 27 13.5 L 9 13.5 Z">
			</path>
		</svg>
		<svg class="Icon_ionic-md-arrow-dropdown_b" viewBox="9 13.5 18 9">
			<path id="Icon_ionic-md-arrow-dropdown_b" d="M 9 13.5 L 18 22.5 L 27 13.5 L 9 13.5 Z">
			</path>
		</svg>
	</div>
	<div id="Rate_Switch_b">
		<svg class="Icon_ionic-md-arrow-dropdown_ca" viewBox="9 13.5 18 9">
			<path id="Icon_ionic-md-arrow-dropdown_ca" d="M 9 13.5 L 18 22.5 L 27 13.5 L 9 13.5 Z">
			</path>
		</svg>
		<svg class="Icon_ionic-md-arrow-dropdown_cb" viewBox="9 13.5 18 9">
			<path id="Icon_ionic-md-arrow-dropdown_cb" d="M 9 13.5 L 18 22.5 L 27 13.5 L 9 13.5 Z">
			</path>
		</svg>
	</div>
	<div id="ID65_b">
		<span>%65</span>
	</div>
	<div id="ID35_b">
		<span>%35</span>
	</div>
	<div id="Main_Content_b">
		<div id="Amount">
			<span>Amount</span>
		</div>
		<svg class="Path_4_b" viewBox="0 0 175 3">
			<path id="Path_4_b" d="M 0 0 L 175 0">
			</path>
		</svg>
	</div>
	<svg class="Rectangle_9">
		<rect id="Rectangle_9" rx="6" ry="6" x="0" y="0" width="202" height="46">
		</rect>
	</svg>
	<svg class="Rectangle_10">
		<rect id="Rectangle_10" rx="6" ry="6" x="0" y="0" width="202" height="46">
		</rect>
	</svg>
	<div id="ID500_gr">
		<span>500 gr.</span>
	</div>
	<svg class="Rectangle_11">
		<rect id="Rectangle_11" rx="6" ry="6" x="0" y="0" width="202" height="46">
		</rect>
	</svg>
	<div id="ID1000_gr">
		<span>1000 gr.</span>
	</div>
	<div id="ID250_gr">
		<span>250 gr.</span>
	</div>
	<svg class="Rectangle_12">
		<rect id="Rectangle_12" rx="6" ry="6" x="0" y="0" width="196" height="40">
		</rect>
	</svg>
	<div id="Main_Content_ch">
		<div id="Order">
			<span>Order</span>
		</div>
		<svg class="Path_4_cj" viewBox="0 0 127.361 3">
			<path id="Path_4_cj" d="M 0 0 L 127.361328125 0">
			</path>
		</svg>
	</div>
	<svg class="Rectangle_16">
		<rect id="Rectangle_16" rx="6" ry="6" x="0" y="0" width="196" height="40">
		</rect>
	</svg>
	<svg class="Rectangle_17">
		<rect onclick="application.goToTargetView(event)" id="Rectangle_17" rx="6" ry="6" x="0" y="0" width="196" height="40">
		</rect>
	</svg>
	<svg class="Rectangle_18">
		<rect id="Rectangle_18" rx="6" ry="6" x="0" y="0" width="202" height="46">
		</rect>
	</svg>
	<svg class="Rectangle_19">
		<rect id="Rectangle_19" rx="6" ry="6" x="0" y="0" width="202" height="46">
		</rect>
	</svg>
	<svg class="Rectangle_20">
		<rect id="Rectangle_20" rx="6" ry="6" x="0" y="0" width="196" height="40">
		</rect>
	</svg>
	<svg class="Rectangle_21">
		<rect id="Rectangle_21" rx="6" ry="6" x="0" y="0" width="196" height="40">
		</rect>
	</svg>
	<div id="Group_2">
		<div id="Add_to_Cart">
			<span>Add to Cart</span>
		</div>
		<svg class="Icon_awesome-shopping-cart" viewBox="0 0 19.687 17.5">
			<path id="Icon_awesome-shopping-cart" d="M 18.05097579956055 10.29898929595947 L 19.6667537689209 3.189614534378052 C 19.78340721130371 2.676303625106812 19.39324760437012 2.1875 18.86684608459473 2.1875 L 5.44167947769165 2.1875 L 5.128388404846191 0.6559081673622131 C 5.05032205581665 0.2741552889347076 4.714404106140137 0 4.324721336364746 0 L 0.8203125 0 C 0.367260754108429 0 0 0.367260754108429 0 0.8203125 L 0 1.3671875 C 0 1.820239186286926 0.367260754108429 2.1875 0.8203125 2.1875 L 3.208891630172729 2.1875 L 5.609946250915527 13.92600059509277 C 5.0355224609375 14.25634670257568 4.6484375 14.87575149536133 4.6484375 15.5859375 C 4.6484375 16.64304733276367 5.505390167236328 17.5 6.5625 17.5 C 7.619609355926514 17.5 8.4765625 16.64304733276367 8.4765625 15.5859375 C 8.4765625 15.05020523071289 8.256206512451172 14.56618595123291 7.901523113250732 14.21875 L 15.06719207763672 14.21875 C 14.71254348754883 14.56618690490723 14.4921875 15.05020523071289 14.4921875 15.5859375 C 14.4921875 16.64304733276367 15.34914016723633 17.5 16.40625 17.5 C 17.46335983276367 17.5 18.3203125 16.64304733276367 18.3203125 15.5859375 C 18.3203125 14.82810497283936 17.87980461120605 14.17322254180908 17.24095153808594 13.86311054229736 L 17.42952156066895 13.03336429595947 C 17.54617500305176 12.52005386352539 17.15601539611816 12.03125 16.62961387634277 12.03125 L 7.455170631408691 12.03125 L 7.231464385986328 10.9375 L 17.25107002258301 10.9375 C 17.63408660888672 10.9375 17.96610832214355 10.67247104644775 18.05097579956055 10.29898929595947 Z">
			</path>
		</svg>
	</div>
	<div id="Group_1">
		<div id="Buy_Now">
			<span>Buy Now</span>
		</div>
		<svg class="Icon_awesome-euro-sign" viewBox="0 2.25 14.632 20.5">
			<path id="Icon_awesome-euro-sign" d="M 14.21757411956787 19.71915817260742 C 14.15744686126709 19.4157772064209 13.85905361175537 19.2216682434082 13.5575475692749 19.29044342041016 C 13.06829357147217 19.40204811096191 12.3027458190918 19.53813743591309 11.47890281677246 19.53813743591309 C 8.881488800048828 19.53813743591309 6.814740180969238 17.94618225097656 5.920977115631104 15.62808036804199 L 11.12326431274414 15.62808036804199 C 11.38014030456543 15.62808036804199 11.60269069671631 15.44999313354492 11.65900993347168 15.19936656951904 L 11.9506311416626 13.90164184570313 C 12.02778148651123 13.55835819244385 11.76672649383545 13.23214340209961 11.41488552093506 13.23214340209961 L 5.272343635559082 13.23214340209961 C 5.216975212097168 12.57650947570801 5.207641124725342 11.93776035308838 5.278613090515137 11.29905700683594 L 11.98655223846436 11.29905700683594 C 12.24460792541504 11.29905700683594 12.46782875061035 11.11940383911133 12.52299213409424 10.86734008789063 L 12.82096576690674 9.505809783935547 C 12.89591884613037 9.163350105285645 12.63513851165771 8.839284896850586 12.28453350067139 8.839284896850586 L 5.957080364227295 8.839284896850586 C 6.901224613189697 6.780544757843018 8.82570743560791 5.40599250793457 11.33920001983643 5.40599250793457 C 12.00206470489502 5.40599250793457 12.64625835418701 5.508950233459473 13.07122135162354 5.595663547515869 C 13.35565948486328 5.653685569763184 13.63620662689209 5.481357574462891 13.71193790435791 5.201084136962891 L 14.26063346862793 3.170852184295654 C 14.3440055847168 2.862390995025635 14.14783763885498 2.547798156738281 13.83388519287109 2.488265991210938 C 13.28001880645752 2.38325023651123 12.38739967346191 2.25 11.42303085327148 2.25 C 6.97599458694458 2.25 3.387533664703369 5.007067203521729 2.062583684921265 8.839285850524902 L 0.5491071343421936 8.839285850524902 C 0.2458627223968506 8.839285850524902 0 9.085148811340332 0 9.388393402099609 L 0 10.74995040893555 C 0 11.05319404602051 0.2458627223968506 11.29905700683594 0.5491071343421936 11.29905700683594 L 1.536081552505493 11.29905700683594 C 1.489910840988159 11.92169761657715 1.482040286064148 12.63919830322266 1.527799129486084 13.23214340209961 L 0.5491071343421936 13.23214340209961 C 0.2458627223968506 13.23214340209961 0 13.47800540924072 0 13.78125 L 0 15.0789737701416 C 0 15.38221836090088 0.2458627223968506 15.62808036804199 0.5491071343421936 15.62808036804199 L 1.927091598510742 15.62808036804199 C 3.072208642959595 19.76157760620117 6.647125244140625 22.75000190734863 11.42303085327148 22.75000190734863 C 12.62653636932373 22.75000190734863 13.64517688751221 22.54207229614258 14.2189474105835 22.39363288879395 C 14.50114154815674 22.32064628601074 14.67777156829834 22.04092216491699 14.6210765838623 21.75497627258301 L 14.21757411956787 19.71916198730469 Z">
			</path>
		</svg>
	</div>
	<svg class="Ellipse_4">
		<ellipse id="Ellipse_4" rx="8.5" ry="8.5" cx="8.5" cy="8.5">
		</ellipse>
	</svg>
	<svg class="Icon_awesome-shopping-cart_cx" viewBox="0 0 41.356 36.761">
		<path id="Icon_awesome-shopping-cart_cx" d="M 37.91827774047852 21.6342830657959 L 41.31241226196289 6.700174331665039 C 41.55746078491211 5.621901988983154 40.73788070678711 4.595110416412354 39.63211059570313 4.595110416412354 L 11.43091106414795 4.595110416412354 L 10.77280426025391 1.377815127372742 C 10.60881805419922 0.5758965611457825 9.903181076049805 0 9.08460521697998 0 L 1.723166346549988 0 C 0.7714759707450867 0 0 0.7714759707450867 0 1.723166346549988 L 0 2.871943950653076 C 0 3.823634386062622 0.7714759707450867 4.595110416412354 1.723166346549988 4.595110416412354 L 6.740668296813965 4.595110416412354 L 11.78437614440918 29.25326347351074 C 10.57772922515869 29.94719505310059 9.764609336853027 31.24832916259766 9.764609336853027 32.74016189575195 C 9.764609336853027 34.96075057983398 11.5647439956665 36.76088333129883 13.7853307723999 36.76088333129883 C 16.00591850280762 36.76088333129883 17.80605316162109 34.96075057983398 17.80605316162109 32.74016189575195 C 17.80605316162109 31.61479187011719 17.34316635131836 30.59804916381836 16.59811210632324 29.86821937561035 L 31.65047264099121 29.86821937561035 C 30.90549278259277 30.59805297851563 30.44260597229004 31.61479187011719 30.44260597229004 32.74016189575195 C 30.44260597229004 34.96075057983398 32.24274063110352 36.76088333129883 34.46332931518555 36.76088333129883 C 36.68391418457031 36.76088333129883 38.48405075073242 34.96075057983398 38.48405075073242 32.74016189575195 C 38.48405075073242 31.14824295043945 37.55870819091797 29.77258110046387 36.21672058105469 29.12115287780762 L 36.61283493041992 27.37817001342773 C 36.85788345336914 26.29989814758301 36.03829956054688 25.27310752868652 34.93253326416016 25.27310752868652 L 15.66049480438232 25.27310752868652 L 15.19057369232178 22.97555160522461 L 36.23797607421875 22.97555160522461 C 37.04254913330078 22.97555160522461 37.73999786376953 22.41882705688477 37.91827774047852 21.6342830657959 Z">
		</path>
	</svg>
</div>
</body>
</html>